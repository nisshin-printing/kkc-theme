{"version":3,"sources":["apps.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","_interopRequireDefault","obj","__esModule","default","_jquery","window","_jquery2","jQuery","this","self","./parts/countdowntimer","./parts/foundation","./parts/headroom","./parts/navigation","./parts/page-transitions","./parts/svg","./parts/waves","2","$","countdownTimer","_this","timesets","data","now","Date","tset","Math","floor","counter","seconds","minutes","hours","days","find","html","setInterval","3","document","foundation","../vendor/foundation.js","4","Headroom","headerMain","ele","querySelector","options","classes","initial","pinned","unpinned","top","notTop","bottom","notBottom","headroom","init","../vendor/headroom","5","click","toggleClass","children","6","7","svg4everybody","../vendor/svg4everybody","8","Waves","attach","../vendor/waves","9","_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","constructor","prototype","functionName","fn","undefined","Function","name","funcNameRegex","results","exec","toString","trim","parseValue","str","test","isNaN","parseFloat","hyphenate","replace","toLowerCase","FOUNDATION_VERSION","Foundation","version","_plugins","_uuids","rtl","attr","plugin","_plugin","className","attrName","registerPlugin","pluginName","uuid","GetYoDigits","$element","trigger","push","unregisterPlugin","splice","indexOf","removeAttr","removeData","prop","reInit","plugins","isJQ","each","_init","type","fns","object","plgs","forEach","p","string","Object","keys","err","console","error","namespace","round","pow","random","slice","reflow","elem","$elem","addBack","$el","opts","warn","split","opt","map","el","er","getFnName","transitionend","end","transitions","transition","WebkitTransition","MozTransition","OTransition","createElement","style","setTimeout","triggerHandler","util","throttle","func","delay","timer","context","args","arguments","apply","method","$meta","$noJS","appendTo","head","removeClass","MediaQuery","Array","plugClass","ReferenceError","getTime","vendors","requestAnimationFrame","vp","cancelAnimationFrame","navigator","userAgent","lastTime","callback","nextTime","max","clearTimeout","performance","start","bind","oThis","aArgs","fToBind","fNOP","fBound","concat","ImNotTouchingYou","element","parent","lrOnly","tbOnly","left","right","eleDims","GetDimensions","parDims","offset","height","width","windowDims","allDirs","rect","getBoundingClientRect","parRect","parentNode","winRect","body","winY","pageYOffset","winX","pageXOffset","parentDims","GetOffsets","anchor","position","vOffset","hOffset","isOverflow","$eleDims","$anchorDims","Box","getKeyCodes","kcs","k","kc","keyCodes","13","27","32","37","38","39","40","commands","Keyboard","parseKey","event","key","which","keyCode","String","fromCharCode","toUpperCase","shiftKey","ctrlKey","altKey","handleKey","component","functions","cmds","command","commandList","ltr","extend","returnValue","handled","unhandled","findFocusable","filter","is","register","componentName","parseStyleToObject","styleObject","reduce","ret","param","parts","val","decodeURIComponent","hasOwnProperty","isArray","queries","current","namedQueries","extractedStyles","css","value","_getCurrentSize","_watcher","atLeast","size","query","get","matchMedia","matches","matched","on","newSize","currentSize","styleMedia","media","script","getElementsByTagName","info","id","insertBefore","getComputedStyle","currentStyle","matchMedium","text","styleSheet","cssText","textContent","Move","duration","move","ts","prog","anim","animate","isIn","animation","cb","finish","hide","reset","transitionDuration","initClass","activeClass","eq","initClasses","activeClasses","addClass","show","offsetWidth","one","Motion","animateIn","animateOut","Nest","Feather","menu","items","role","subMenuClass","subItemClass","hasSubClass","$item","$sub","aria-haspopup","aria-expanded","aria-label","data-submenu","aria-hidden","Burn","Timer","nameSpace","remain","isPaused","restart","infinite","pause","onImagesLoaded","images","singleImageLoaded","unloaded","complete","naturalWidth","onTouchEnd","removeEventListener","onTouchMove","isMoving","spotSwipe","preventDefault","dir","x","touches","pageX","dx","pageY","startPosX","elapsedTime","startTime","abs","moveThreshold","timeThreshold","onTouchStart","startPosY","addEventListener","enabled","documentElement","special","swipe","setup","noop","addTouch","handleTouch","simulatedEvent","changedTouches","first","eventTypes","touchstart","touchmove","touchend","MouseEvent","bubbles","cancelable","screenX","screenY","clientX","clientY","createEvent","initMouseEvent","target","dispatchEvent","checkListeners","eventsListener","resizeListener","scrollListener","closemeListener","yetiBoxes","plugNames","listeners","join","off","pluginId","not","debounce","$nodes","MutationObserver","nodes","querySelectorAll","listeningElementsMutation","mutationRecordsList","$target","elementObserver","observe","attributes","childList","characterData","subtree","attributeFilter","prefixes","triggers","stopPropagation","fadeOut","load","IHearYou","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","Abide","defaults","$inputs","_events","_this2","resetForm","validateForm","validateOn","validateInput","liveValidate","isGood","checked","$error","siblings","formErrorSelector","$label","closest","$els","_this3","labels","findLabel","$formError","findFormError","labelErrorClass","formErrorClass","inputErrorClass","groupName","$labels","findRadioLabels","$formErrors","removeRadioErrorClasses","clearRequire","requiredCheck","validated","customValidator","validator","equalTo","validateRadio","validateText","matchValidation","validators","goodToGo","message","acc","noError","pattern","inputText","valid","patterns","RegExp","$group","required","_this4","clear","v","$form","removeErrorClasses","alpha","alpha_numeric","integer","number","card","cvv","email","url","domain","datetime","date","time","dateISO","month_day_year","day_month_year","color","Accordion","ENTER","SPACE","ARROW_DOWN","ARROW_UP","$tabs","idx","$content","linkId","aria-controls","aria-selected","aria-labelledby","$initActive","down","$tabContent","hasClass","allowAllClosed","up","toggle","next","$a","focus","multiExpand","previous","prev","firstTime","$currentActive","slideDown","slideSpeed","$aunts","canClose","slideUp","stop","AccordionMenu","ARROW_RIGHT","ARROW_LEFT","ESCAPE","TAB","SHIFT_TAB","aria-multiselectable","multiOpen","$menuLinks","subId","isActive","initPanes","$submenu","$prevElement","$nextElement","$elements","min","parents","open","close","closeAll","hideAll","stopImmediatePropagation","parentsUntil","add","$menus","Drilldown","$submenuAnchors","$submenus","$menuItems","_prepareMenu","_keyboardEvents","$link","parentLink","clone","prependTo","wrap","tabindex","$menu","$back","prepend","backButton","_back","$wrapper","wrapper","_getMaxDims","_show","closeOnClick","$body","contains","_hideAll","_hide","blur","result","numOfElems","unwrap","remove","Dropdown","$id","$anchor","data-is-focus","data-yeti-box","positionClass","getPositionClass","usedPositions","data-resize","verticalPosition","match","horizontalPosition","classChanged","direction","_reposition","_setPosition","open.zf.trigger","close.zf.trigger","toggle.zf.trigger","resizeme.zf.trigger","hover","timeout","hoverDelay","hoverPane","visibleFocusableElements","tab_forward","trapFocus","tab_backward","autoFocus","$focusable","_addBodyHandler","curPositionClass","DropdownMenu","subs","verticalClass","rightClass","alignment","changed","hasTouch","ontouchstart","parClass","handleClickFn","hasSub","hasClicked","clickOpen","forceFollow","disableHover","autoclose","closingTime","isTab","index","nextSibling","prevSibling","openSub","closeSub","$sibs","oldClass","$parentLi","$toClose","somethingToClose","data-is-click","Equalizer","eqId","$watched","hasNested","isNested","isOn","_bindHandler","onResizeMeBound","_onResizeMe","onPostEqualizedBound","_onPostEqualized","tooSmall","imgs","equalizeOn","_checkMQ","_reflow",".zf.equalizer","_pauseEvents","equalizeOnStack","_isStacked","equalizeByRow","getHeightsByRow","applyHeightByRow","getHeights","applyHeight","heights","len","offsetHeight","lastElTopOffset","groups","group","elOffsetTop","j","ln","groupsILength","lenJ","Interchange","rules","currentPath","_addBreakpoints","_generateRules","rule","path","SPECIAL_QUERIES","rulesList","nodeName","background-image","response","landscape","portrait","retina","Magellan","$targets","$links","data-scroll","$active","scrollPos","parseInt","points","winHeight","innerHeight","clientHeight","docHeight","scrollHeight","$tar","pt","threshold","targetPoint","animationDuration","easing","animationEasing","deepLinking","location","hash","scrollToLoc","calcPoints","_updateActive","scrollme.zf.trigger","arrival","getAttribute","loc","barOffset","scrollTop","curIdx","winPos","isDown","curVisible","history","pushState","OffCanvas","$lastTrigger","$triggers","$exiter","exiter","setAttribute","append","isRevealed","revealClass","revealOn","_setMQChecker","transitionTime","keydown.zf.offcanvas","_handleKeyboard","click.zf.offcanvas","reveal","$closer","forceTop","_trapFocus","focusable","last","keycode","Orbit","containerClass","$slides","slideClass","$images","initActive","useMUI","_prepareForOrbit","bullets","_loadBullets","autoPlay","geoSync","accessible","$bullets","boxOfBullets","timerDelay","changeSlide","_setWrapperHeight","_setSlideHeight","temp","display","pauseOnHover","navButtons","$controls","nextClass","prevClass","$slide","isLTR","chosenSlide","$curSlide","$newSlide","$firstSlide","$lastSlide","dirIn","dirOut","infiniteWrap","_updateBullets","$oldBullet","span","detach","animInFromRight","animOutToRight","animInFromLeft","animOutToLeft","ResponsiveMenu","currentMq","currentPlugin","rulesTree","ruleSize","rulePlugin","MenuPlugins","isEmptyObject","_checkMediaQueries","matchedMq","cssClass","destroy","dropdown","drilldown","accordion","ResponsiveToggle","targetID","$targetMenu","$toggler","_update","_updateMqHandler","toggleMenu","hideFor","iPhoneSniff","androidSniff","mobileSniff","Reveal","cached","mq","isMobile","fullScreen","overlay","$overlay","_makeOverlay","deepLink","outerWidth","outerHeight","margin","_updatePosition","_handleState","visibility","multipleOpened","animationIn","afterAnimationFocus","log","focusableElements","showDelay","originalScrollPos","_extraHandlers","closeOnEsc","finishUp","animationOut","hideDelay","resetOnClose","replaceState","title","pathname","btmOffsetPct","percent","frac","num","absPosition","$handle","clickPos","Slider","SHIFT_ARROW_RIGHT","SHIFT_ARROW_UP","SHIFT_ARROW_DOWN","SHIFT_ARROW_LEFT","inputs","handles","$input","$fill","vertical","isDbl","disabled","disabledClass","binding","_setInitAttr","doubleSided","$handle2","$input2","_setHandlePos","initialStart","initialEnd","$hndl","noInvert","h2Val","step","h1Val","vert","hOrW","lOrT","handleDim","elemDim","pctOfBar","toFixed","pxToMove","movement","decimal","_setValues","dim","isLeftHndl","handlePct","handlePos","moveTime","changedDelay","aria-valuemax","aria-valuemin","aria-valuenow","aria-orientation","hasVal","_adjustValue","eventOffset","barDim","windowScroll","scrollLeft","elemOffset","barXY","eventFromBar","offsetPct","firstHndlPos","secndHndlPos","prev_val","next_val","div","curHandle","_handleEvent","clickSelect","draggable","currentTarget","newValue","_$handle","oldValue","decrease","increase","decrease_fast","increase_fast","invertVertical","emCalc","em","fontSize","Sticky","$parent","wasWrapped","$container","container","wrapInner","stickyClass","scrollCount","checkEvery","isStuck","_parsePoints","_setSizes","_calc","reverse","topAnchor","btm","btmAnchor","pts","breaks","place","canStick","_pauseListeners","checkSizes","scroll","topPoint","bottomPoint","_setSticky","_removeSticky","stickTo","mrgn","notStuckTo","isTop","stickToTop","anchorPt","anchorHeight","elemHeight","topOrBottom","stickyOn","newElemWidth","comp","pdng","max-width","newContainerHeight","containerHeight","_setBreakPoints","mTop","marginTop","mBtm","marginBottom","Tabs","$tabTitles","linkClass","matchHeight","_setHeight","_addKeyHandler","_addClickHandler","_setHeightMqHandler","_handleTabChange","wrapOnKeys","$tabLink","$targetContent","$oldTab","idStr","panelClass","panel","Toggler","input","_updateARIA","Tooltip","isClick","elemId","_getPositionClass","tipText","template","_buildTemplate","aria-describedby","data-toggle","triggerClass","templateClasses","tooltipClass","$template","data-is-active","$tipDims","showOn","fadeIn","fadeInDuration","fadeOutDuration","isFocus","disableForTouch","touchCloseText","10","root","factory","define","amd","Debouncer","ticking","isDOMElement","nodeType","replacement","normalizeTolerance","lastKnownScrollY","tolerance","scroller","initialised","onPin","onUnpin","onTop","onNotTop","onBottom","onNotBottom","features","classList","rAF","webkitRequestAnimationFrame","mozRequestAnimationFrame","update","requestTick","rafCallback","handleEvent","cutsTheMustard","debouncer","attachEvent","getScrollY","unpin","pin","getViewportHeight","getElementPhysicalHeight","elm","getScrollerPhysicalHeight","getDocumentHeight","getElementHeight","getScrollerHeight","isOutOfBounds","currentScrollY","pastTop","pastBottom","toleranceExceeded","shouldUnpin","scrollingDown","pastOffset","shouldPin","scrollingUp","scrollDirection","11","embed","svg","fragment","createDocumentFragment","viewBox","cloneNode","childNodes","appendChild","firstChild","loadreadystatechange","xhr","onreadystatechange","readyState","cachedDocument","_cachedDocument","implementation","createHTMLDocument","innerHTML","responseText","_cachedTarget","_embeds","item","getElementById","rawopts","oninterval","uses","use","src","polyfill","validate","removeChild","srcSplit","shift","requests","XMLHttpRequest","send","newerIEUA","webkitUA","olderEdgeUA","12","isWindow","getWindow","defaultView","isObject","isDOMNode","getWavesElements","stringRepr","$$","docElem","win","box","doc","ownerDocument","clientTop","clientLeft","convertStyle","styleObj","removeRipple","ripple","relativeX","relativeY","scale","translate","diff","Number","Effect","opacity","-webkit-transition-duration","-moz-transition-duration","-o-transition-duration","transition-duration","-webkit-transform","-moz-transform","-ms-transform","-o-transform","transform","getWavesEffectElement","TouchHandler","allowEvent","srcElement","parentElement","SVGElement","showEffect","registerEvent","hidden","hideEffect","hideEvent","touchMove","moveEvent","isTouchAvailable","velocity","button","pos","clientWidth","y","rippleStyle","ripples","getElementsByClassName","TagWrapper","tagName","replaceChild","elementStyle","backgroundColor","img","allow","eType","elements","elementsLen","wait","centre","mousedown","hideRipple","mouseup","calm","displayEffect"],"mappings":"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","file":"apps.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _jquery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nrequire('./parts/svg');\n\nrequire('./parts/waves');\n\nrequire('./parts/headroom');\n\nrequire('./parts/foundation');\n\nrequire('./parts/countdowntimer');\n\nrequire('./parts/navigation');\n\nrequire('./parts/page-transitions');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.jQuery = _jquery2.default;\n/*\r\n * Parts\r\n */\n/*\r\n Global\r\n */\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./parts/countdowntimer\":2,\"./parts/foundation\":3,\"./parts/headroom\":4,\"./parts/navigation\":5,\"./parts/page-transitions\":6,\"./parts/svg\":7,\"./parts/waves\":8}],2:[function(require,module,exports){\n'use strict';\n\n!function ($) {\n    'use strict';\n\n    function countdownTimer() {\n        var _this = $('#countdown-timer .timervalue'),\n            timesets = _this.data('cdt'),\n            now = new Date(),\n            tset = Math.floor(now / 1000),\n            counter = timesets - tset;\n        // Seconds\n        var seconds = Math.floor(counter % 60),\n            seconds = seconds < 10 && seconds >= 0 ? '0' + seconds : seconds;\n\n        // Minutes\n        counter = counter / 60;\n        var minutes = Math.floor(counter % 60),\n            minutes = minutes < 10 && minutes >= 0 ? '0' + minutes : minutes;\n\n        // Hours\n        counter = counter / 60;\n        var hours = Math.floor(counter & 24),\n            hours = hours < 10 && hours >= 0 ? '0' + hours : hours;\n\n        // Days\n        counter = counter / 24;\n        var days = Math.floor(counter),\n            days = days < 10 && days >= 0 ? '0' + days : days;\n\n        _this.find('.number-seconds').html(seconds);\n        _this.find('.number-minutes').html(minutes);\n        _this.find('.number-hours').html(hours);\n        _this.find('.number-days').html(days);\n    }\n    setInterval(countdownTimer, 100);\n}(jQuery);\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar foundation = require('../vendor/foundation.js');\n(function ($) {\n\t'use strict';\n\n\t$(document).foundation();\n})(jQuery);\n\n},{\"../vendor/foundation.js\":9}],4:[function(require,module,exports){\n'use strict';\n\n// Headroom.js\n{\n\t'use strict';\n\tvar Headroom = require('../vendor/headroom');\n\tvar headerMain = {\n\t\tele: document.querySelector('#topbar'),\n\t\toptions: {\n\t\t\tclasses: {\n\t\t\t\tinitial: 'js-headroom',\n\t\t\t\tpinned: 'is-pinned',\n\t\t\t\tunpinned: 'is-unpinned',\n\t\t\t\ttop: 'is-top',\n\t\t\t\tnotTop: 'is-not-top',\n\t\t\t\tbottom: false,\n\t\t\t\tnotBottom: false\n\t\t\t}\n\t\t}\n\t};\n\tvar headroom = new Headroom(headerMain.ele, headerMain.options);\n\theadroom.init();\n}\n\n},{\"../vendor/headroom\":10}],5:[function(require,module,exports){\n'use strict';\n\n!function ($) {\n  $('#btn-menu').click(function () {\n    $('body').toggleClass('active-overlay');\n    $('#responsive-menu').toggleClass('animated');\n    $(this).children().children().toggleClass('menu-icon');\n  });\n}(jQuery);\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n{\n\t'use strict';\n\tvar svg4everybody = require('../vendor/svg4everybody');\n\tsvg4everybody();\n}\n\n},{\"../vendor/svg4everybody\":11}],8:[function(require,module,exports){\n'use strict';\n\n{\n\tvar Waves = require('../vendor/waves');\n\tWaves.attach('.js-waves-effect');\n\tWaves.init();\n}\n\n},{\"../vendor/waves\":12}],9:[function(require,module,exports){\n'use strict';var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};!function($){\"use strict\";var FOUNDATION_VERSION='6.2.3';// Global Foundation object\n// This is attached to the window, or used as a module for AMD/Browserify\nvar Foundation={version:FOUNDATION_VERSION,/**\n     * Stores initialized plugins.\n     */_plugins:{},/**\n     * Stores generated unique ids for plugin instances\n     */_uuids:[],/**\n     * Returns a boolean for RTL support\n     */rtl:function rtl(){return $('html').attr('dir')==='rtl';},/**\n     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\n     * @param {Object} plugin - The constructor of the plugin.\n     */plugin:function plugin(_plugin,name){// Object key to use when adding to global Foundation object\n// Examples: Foundation.Reveal, Foundation.OffCanvas\nvar className=name||functionName(_plugin);// Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\n// Examples: data-reveal, data-off-canvas\nvar attrName=hyphenate(className);// Add to the Foundation object and the plugins list (for reflowing)\nthis._plugins[attrName]=this[className]=_plugin;},/**\n     * @function\n     * Populates the _uuids array with pointers to each individual plugin instance.\n     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\n     * Also fires the initialization event for each plugin, consolidating repetitive code.\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n     * @param {String} name - the name of the plugin, passed as a camelCased string.\n     * @fires Plugin#init\n     */registerPlugin:function registerPlugin(plugin,name){var pluginName=name?hyphenate(name):functionName(plugin.constructor).toLowerCase();plugin.uuid=this.GetYoDigits(6,pluginName);if(!plugin.$element.attr('data-'+pluginName)){plugin.$element.attr('data-'+pluginName,plugin.uuid);}if(!plugin.$element.data('zfPlugin')){plugin.$element.data('zfPlugin',plugin);}/**\n       * Fires when the plugin has initialized.\n       * @event Plugin#init\n       */plugin.$element.trigger('init.zf.'+pluginName);this._uuids.push(plugin.uuid);return;},/**\n     * @function\n     * Removes the plugins uuid from the _uuids array.\n     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\n     * Also fires the destroyed event for the plugin, consolidating repetitive code.\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n     * @fires Plugin#destroyed\n     */unregisterPlugin:function unregisterPlugin(plugin){var pluginName=hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));this._uuids.splice(this._uuids.indexOf(plugin.uuid),1);plugin.$element.removeAttr('data-'+pluginName).removeData('zfPlugin')/**\n       * Fires when the plugin has been destroyed.\n       * @event Plugin#destroyed\n       */.trigger('destroyed.zf.'+pluginName);for(var prop in plugin){plugin[prop]=null;//clean up script to prep for garbage collection.\n}return;},/**\n     * @function\n     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\n     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\n     * @default If no argument is passed, reflow all currently active plugins.\n     */reInit:function reInit(plugins){var isJQ=plugins instanceof $;try{if(isJQ){plugins.each(function(){$(this).data('zfPlugin')._init();});}else{var type=typeof plugins==='undefined'?'undefined':_typeof(plugins),_this=this,fns={'object':function object(plgs){plgs.forEach(function(p){p=hyphenate(p);$('[data-'+p+']').foundation('_init');});},'string':function string(){plugins=hyphenate(plugins);$('[data-'+plugins+']').foundation('_init');},'undefined':function undefined(){this['object'](Object.keys(_this._plugins));}};fns[type](plugins);}}catch(err){console.error(err);}finally{return plugins;}},/**\n     * returns a random base-36 uid with namespacing\n     * @function\n     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n     * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n     * @returns {String} - unique id\n     */GetYoDigits:function GetYoDigits(length,namespace){length=length||6;return Math.round(Math.pow(36,length+1)-Math.random()*Math.pow(36,length)).toString(36).slice(1)+(namespace?'-'+namespace:'');},/**\n     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\n     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\n     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\n     */reflow:function reflow(elem,plugins){// If plugins is undefined, just grab everything\nif(typeof plugins==='undefined'){plugins=Object.keys(this._plugins);}// If plugins is a string, convert it to an array with one item\nelse if(typeof plugins==='string'){plugins=[plugins];}var _this=this;// Iterate through each plugin\n$.each(plugins,function(i,name){// Get the current plugin\nvar plugin=_this._plugins[name];// Localize the search to all elements inside elem, as well as elem itself, unless elem === document\nvar $elem=$(elem).find('[data-'+name+']').addBack('[data-'+name+']');// For each plugin found, initialize it\n$elem.each(function(){var $el=$(this),opts={};// Don't double-dip on plugins\nif($el.data('zfPlugin')){console.warn(\"Tried to initialize \"+name+\" on an element that already has a Foundation plugin.\");return;}if($el.attr('data-options')){var thing=$el.attr('data-options').split(';').forEach(function(e,i){var opt=e.split(':').map(function(el){return el.trim();});if(opt[0])opts[opt[0]]=parseValue(opt[1]);});}try{$el.data('zfPlugin',new plugin($(this),opts));}catch(er){console.error(er);}finally{return;}});});},getFnName:functionName,transitionend:function transitionend($elem){var transitions={'transition':'transitionend','WebkitTransition':'webkitTransitionEnd','MozTransition':'transitionend','OTransition':'otransitionend'};var elem=document.createElement('div'),end;for(var t in transitions){if(typeof elem.style[t]!=='undefined'){end=transitions[t];}}if(end){return end;}else{end=setTimeout(function(){$elem.triggerHandler('transitionend',[$elem]);},1);return'transitionend';}}};Foundation.util={/**\n     * Function for applying a debounce effect to a function call.\n     * @function\n     * @param {Function} func - Function to be called at end of timeout.\n     * @param {Number} delay - Time in ms to delay the call of `func`.\n     * @returns function\n     */throttle:function throttle(func,delay){var timer=null;return function(){var context=this,args=arguments;if(timer===null){timer=setTimeout(function(){func.apply(context,args);timer=null;},delay);}};}};// TODO: consider not making this a jQuery function\n// TODO: need way to reflow vs. re-initialize\n/**\n   * The Foundation jQuery method.\n   * @param {String|Array} method - An action to perform on the current jQuery object.\n   */var foundation=function foundation(method){var type=typeof method==='undefined'?'undefined':_typeof(method),$meta=$('meta.foundation-mq'),$noJS=$('.no-js');if(!$meta.length){$('<meta class=\"foundation-mq\">').appendTo(document.head);}if($noJS.length){$noJS.removeClass('no-js');}if(type==='undefined'){//needs to initialize the Foundation object, or an individual plugin.\nFoundation.MediaQuery._init();Foundation.reflow(this);}else if(type==='string'){//an individual method to invoke on a plugin or group of plugins\nvar args=Array.prototype.slice.call(arguments,1);//collect all the arguments, if necessary\nvar plugClass=this.data('zfPlugin');//determine the class of plugin\nif(plugClass!==undefined&&plugClass[method]!==undefined){//make sure both the class and method exist\nif(this.length===1){//if there's only one, call it directly.\nplugClass[method].apply(plugClass,args);}else{this.each(function(i,el){//otherwise loop through the jQuery collection and invoke the method on each\nplugClass[method].apply($(el).data('zfPlugin'),args);});}}else{//error for no class or no method\nthrow new ReferenceError(\"We're sorry, '\"+method+\"' is not an available method for \"+(plugClass?functionName(plugClass):'this element')+'.');}}else{//error for invalid argument type\nthrow new TypeError('We\\'re sorry, '+type+' is not a valid parameter. You must use a string representing the method you wish to invoke.');}return this;};window.Foundation=Foundation;$.fn.foundation=foundation;// Polyfill for requestAnimationFrame\n(function(){if(!Date.now||!window.Date.now)window.Date.now=Date.now=function(){return new Date().getTime();};var vendors=['webkit','moz'];for(var i=0;i<vendors.length&&!window.requestAnimationFrame;++i){var vp=vendors[i];window.requestAnimationFrame=window[vp+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vp+'CancelAnimationFrame']||window[vp+'CancelRequestAnimationFrame'];}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var lastTime=0;window.requestAnimationFrame=function(callback){var now=Date.now();var nextTime=Math.max(lastTime+16,now);return setTimeout(function(){callback(lastTime=nextTime);},nextTime-now);};window.cancelAnimationFrame=clearTimeout;}/**\n     * Polyfill for performance.now, required by rAF\n     */if(!window.performance||!window.performance.now){window.performance={start:Date.now(),now:function now(){return Date.now()-this.start;}};}})();if(!Function.prototype.bind){Function.prototype.bind=function(oThis){if(typeof this!=='function'){// closest thing possible to the ECMAScript 5\n// internal IsCallable function\nthrow new TypeError('Function.prototype.bind - what is trying to be bound is not callable');}var aArgs=Array.prototype.slice.call(arguments,1),fToBind=this,fNOP=function fNOP(){},fBound=function fBound(){return fToBind.apply(this instanceof fNOP?this:oThis,aArgs.concat(Array.prototype.slice.call(arguments)));};if(this.prototype){// native functions don't have a prototype\nfNOP.prototype=this.prototype;}fBound.prototype=new fNOP();return fBound;};}// Polyfill to get the name of a function in IE9\nfunction functionName(fn){if(Function.prototype.name===undefined){var funcNameRegex=/function\\s([^(]{1,})\\(/;var results=funcNameRegex.exec(fn.toString());return results&&results.length>1?results[1].trim():\"\";}else if(fn.prototype===undefined){return fn.constructor.name;}else{return fn.prototype.constructor.name;}}function parseValue(str){if(/true/.test(str))return true;else if(/false/.test(str))return false;else if(!isNaN(str*1))return parseFloat(str);return str;}// Convert PascalCase to kebab-case\n// Thank you: http://stackoverflow.com/a/8955580\nfunction hyphenate(str){return str.replace(/([a-z])([A-Z])/g,'$1-$2').toLowerCase();}}(jQuery);'use strict';!function($){Foundation.Box={ImNotTouchingYou:ImNotTouchingYou,GetDimensions:GetDimensions,GetOffsets:GetOffsets};/**\n   * Compares the dimensions of an element to a container and determines collision events with container.\n   * @function\n   * @param {jQuery} element - jQuery object to test for collisions.\n   * @param {jQuery} parent - jQuery object to use as bounding container.\n   * @param {Boolean} lrOnly - set to true to check left and right values only.\n   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n   * @default if no parent object passed, detects collisions with `window`.\n   * @returns {Boolean} - true if collision free, false if a collision in any direction.\n   */function ImNotTouchingYou(element,parent,lrOnly,tbOnly){var eleDims=GetDimensions(element),top,bottom,left,right;if(parent){var parDims=GetDimensions(parent);bottom=eleDims.offset.top+eleDims.height<=parDims.height+parDims.offset.top;top=eleDims.offset.top>=parDims.offset.top;left=eleDims.offset.left>=parDims.offset.left;right=eleDims.offset.left+eleDims.width<=parDims.width+parDims.offset.left;}else{bottom=eleDims.offset.top+eleDims.height<=eleDims.windowDims.height+eleDims.windowDims.offset.top;top=eleDims.offset.top>=eleDims.windowDims.offset.top;left=eleDims.offset.left>=eleDims.windowDims.offset.left;right=eleDims.offset.left+eleDims.width<=eleDims.windowDims.width;}var allDirs=[bottom,top,left,right];if(lrOnly){return left===right===true;}if(tbOnly){return top===bottom===true;}return allDirs.indexOf(false)===-1;};/**\n   * Uses native methods to return an object of dimension values.\n   * @function\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n   * @returns {Object} - nested object of integer pixel values\n   * TODO - if element is window, return only those values.\n   */function GetDimensions(elem,test){elem=elem.length?elem[0]:elem;if(elem===window||elem===document){throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");}var rect=elem.getBoundingClientRect(),parRect=elem.parentNode.getBoundingClientRect(),winRect=document.body.getBoundingClientRect(),winY=window.pageYOffset,winX=window.pageXOffset;return{width:rect.width,height:rect.height,offset:{top:rect.top+winY,left:rect.left+winX},parentDims:{width:parRect.width,height:parRect.height,offset:{top:parRect.top+winY,left:parRect.left+winX}},windowDims:{width:winRect.width,height:winRect.height,offset:{top:winY,left:winX}}};}/**\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n   * such as: Tooltip, Reveal, and Dropdown\n   * @function\n   * @param {jQuery} element - jQuery object for the element being positioned.\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n   */function GetOffsets(element,anchor,position,vOffset,hOffset,isOverflow){var $eleDims=GetDimensions(element),$anchorDims=anchor?GetDimensions(anchor):null;switch(position){case'top':return{left:Foundation.rtl()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width:$anchorDims.offset.left,top:$anchorDims.offset.top-($eleDims.height+vOffset)};break;case'left':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top};break;case'right':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset,top:$anchorDims.offset.top};break;case'center top':return{left:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2,top:$anchorDims.offset.top-($eleDims.height+vOffset)};break;case'center bottom':return{left:isOverflow?hOffset:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2,top:$anchorDims.offset.top+$anchorDims.height+vOffset};break;case'center left':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top+$anchorDims.height/2-$eleDims.height/2};break;case'center right':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset+1,top:$anchorDims.offset.top+$anchorDims.height/2-$eleDims.height/2};break;case'center':return{left:$eleDims.windowDims.offset.left+$eleDims.windowDims.width/2-$eleDims.width/2,top:$eleDims.windowDims.offset.top+$eleDims.windowDims.height/2-$eleDims.height/2};break;case'reveal':return{left:($eleDims.windowDims.width-$eleDims.width)/2,top:$eleDims.windowDims.offset.top+vOffset};case'reveal full':return{left:$eleDims.windowDims.offset.left,top:$eleDims.windowDims.offset.top};break;case'left bottom':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top+$anchorDims.height};break;case'right bottom':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset-$eleDims.width,top:$anchorDims.offset.top+$anchorDims.height};break;default:return{left:Foundation.rtl()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width:$anchorDims.offset.left,top:$anchorDims.offset.top+$anchorDims.height+vOffset};}}}(jQuery);/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/'use strict';!function($){var keyCodes={9:'TAB',13:'ENTER',27:'ESCAPE',32:'SPACE',37:'ARROW_LEFT',38:'ARROW_UP',39:'ARROW_RIGHT',40:'ARROW_DOWN'};var commands={};var Keyboard={keys:getKeyCodes(keyCodes),/**\n     * Parses the (keyboard) event and returns a String that represents its key\n     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n     * @param {Event} event - the event generated by the event handler\n     * @return String key - String that represents the key pressed\n     */parseKey:function parseKey(event){var key=keyCodes[event.which||event.keyCode]||String.fromCharCode(event.which).toUpperCase();if(event.shiftKey)key='SHIFT_'+key;if(event.ctrlKey)key='CTRL_'+key;if(event.altKey)key='ALT_'+key;return key;},/**\n     * Handles the given (keyboard) event\n     * @param {Event} event - the event generated by the event handler\n     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n     * @param {Objects} functions - collection of functions that are to be executed\n     */handleKey:function handleKey(event,component,functions){var commandList=commands[component],keyCode=this.parseKey(event),cmds,command,fn;if(!commandList)return console.warn('Component not defined!');if(typeof commandList.ltr==='undefined'){// this component does not differentiate between ltr and rtl\ncmds=commandList;// use plain list\n}else{// merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\nif(Foundation.rtl())cmds=$.extend({},commandList.ltr,commandList.rtl);else cmds=$.extend({},commandList.rtl,commandList.ltr);}command=cmds[keyCode];fn=functions[command];if(fn&&typeof fn==='function'){// execute function  if exists\nvar returnValue=fn.apply();if(functions.handled||typeof functions.handled==='function'){// execute function when event was handled\nfunctions.handled(returnValue);}}else{if(functions.unhandled||typeof functions.unhandled==='function'){// execute function when event was not handled\nfunctions.unhandled();}}},/**\n     * Finds all focusable elements within the given `$element`\n     * @param {jQuery} $element - jQuery object to search within\n     * @return {jQuery} $focusable - all focusable elements within `$element`\n     */findFocusable:function findFocusable($element){return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function(){if(!$(this).is(':visible')||$(this).attr('tabindex')<0){return false;}//only have visible elements and those that have a tabindex greater or equal 0\nreturn true;});},/**\n     * Returns the component name name\n     * @param {Object} component - Foundation component, e.g. Slider or Reveal\n     * @return String componentName\n     */register:function register(componentName,cmds){commands[componentName]=cmds;}};/*\n   * Constants for easier comparing.\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   */function getKeyCodes(kcs){var k={};for(var kc in kcs){k[kcs[kc]]=kcs[kc];}return k;}Foundation.Keyboard=Keyboard;}(jQuery);'use strict';!function($){// Default set of media queries\nvar defaultQueries={'default':'only screen',landscape:'only screen and (orientation: landscape)',portrait:'only screen and (orientation: portrait)',retina:'only screen and (-webkit-min-device-pixel-ratio: 2),'+'only screen and (min--moz-device-pixel-ratio: 2),'+'only screen and (-o-min-device-pixel-ratio: 2/1),'+'only screen and (min-device-pixel-ratio: 2),'+'only screen and (min-resolution: 192dpi),'+'only screen and (min-resolution: 2dppx)'};var MediaQuery={queries:[],current:'',/**\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n     * @function\n     * @private\n     */_init:function _init(){var self=this;var extractedStyles=$('.foundation-mq').css('font-family');var namedQueries;namedQueries=parseStyleToObject(extractedStyles);for(var key in namedQueries){if(namedQueries.hasOwnProperty(key)){self.queries.push({name:key,value:'only screen and (min-width: '+namedQueries[key]+')'});}}this.current=this._getCurrentSize();this._watcher();},/**\n     * Checks if the screen is at least as wide as a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n     */atLeast:function atLeast(size){var query=this.get(size);if(query){return window.matchMedia(query).matches;}return false;},/**\n     * Gets the media query of a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to get.\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n     */get:function get(size){for(var i in this.queries){if(this.queries.hasOwnProperty(i)){var query=this.queries[i];if(size===query.name)return query.value;}}return null;},/**\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n     * @function\n     * @private\n     * @returns {String} Name of the current breakpoint.\n     */_getCurrentSize:function _getCurrentSize(){var matched;for(var i=0;i<this.queries.length;i++){var query=this.queries[i];if(window.matchMedia(query.value).matches){matched=query;}}if((typeof matched==='undefined'?'undefined':_typeof(matched))==='object'){return matched.name;}else{return matched;}},/**\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n     * @function\n     * @private\n     */_watcher:function _watcher(){var _this=this;$(window).on('resize.zf.mediaquery',function(){var newSize=_this._getCurrentSize(),currentSize=_this.current;if(newSize!==currentSize){// Change the current media query\n_this.current=newSize;// Broadcast the media query change on the window\n$(window).trigger('changed.zf.mediaquery',[newSize,currentSize]);}});}};Foundation.MediaQuery=MediaQuery;// matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\nwindow.matchMedia||(window.matchMedia=function(){'use strict';// For browsers that support matchMedium api such as IE 9 and webkit\nvar styleMedia=window.styleMedia||window.media;// For those that don't support matchMedium\nif(!styleMedia){var style=document.createElement('style'),script=document.getElementsByTagName('script')[0],info=null;style.type='text/css';style.id='matchmediajs-test';script.parentNode.insertBefore(style,script);// 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\ninfo='getComputedStyle'in window&&window.getComputedStyle(style,null)||style.currentStyle;styleMedia={matchMedium:function matchMedium(media){var text='@media '+media+'{ #matchmediajs-test { width: 1px; } }';// 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\nif(style.styleSheet){style.styleSheet.cssText=text;}else{style.textContent=text;}// Test if media query is true or false\nreturn info.width==='1px';}};}return function(media){return{matches:styleMedia.matchMedium(media||'all'),media:media||'all'};};}());// Thank you: https://github.com/sindresorhus/query-string\nfunction parseStyleToObject(str){var styleObject={};if(typeof str!=='string'){return styleObject;}str=str.trim().slice(1,-1);// browsers re-quote string style values\nif(!str){return styleObject;}styleObject=str.split('&').reduce(function(ret,param){var parts=param.replace(/\\+/g,' ').split('=');var key=parts[0];var val=parts[1];key=decodeURIComponent(key);// missing `=` should be `null`:\n// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\nval=val===undefined?null:decodeURIComponent(val);if(!ret.hasOwnProperty(key)){ret[key]=val;}else if(Array.isArray(ret[key])){ret[key].push(val);}else{ret[key]=[ret[key],val];}return ret;},{});return styleObject;}Foundation.MediaQuery=MediaQuery;}(jQuery);'use strict';!function($){/**\n   * Motion module.\n   * @module foundation.motion\n   */var initClasses=['mui-enter','mui-leave'];var activeClasses=['mui-enter-active','mui-leave-active'];var Motion={animateIn:function animateIn(element,animation,cb){animate(true,element,animation,cb);},animateOut:function animateOut(element,animation,cb){animate(false,element,animation,cb);}};function Move(duration,elem,fn){var anim,prog,start=null;// console.log('called');\nfunction move(ts){if(!start)start=window.performance.now();// console.log(start, ts);\nprog=ts-start;fn.apply(elem);if(prog<duration){anim=window.requestAnimationFrame(move,elem);}else{window.cancelAnimationFrame(anim);elem.trigger('finished.zf.animate',[elem]).triggerHandler('finished.zf.animate',[elem]);}}anim=window.requestAnimationFrame(move);}/**\n   * Animates an element in or out using a CSS transition class.\n   * @function\n   * @private\n   * @param {Boolean} isIn - Defines if the animation is in or out.\n   * @param {Object} element - jQuery or HTML object to animate.\n   * @param {String} animation - CSS class to use.\n   * @param {Function} cb - Callback to run when animation is finished.\n   */function animate(isIn,element,animation,cb){element=$(element).eq(0);if(!element.length)return;var initClass=isIn?initClasses[0]:initClasses[1];var activeClass=isIn?activeClasses[0]:activeClasses[1];// Set up the animation\nreset();element.addClass(animation).css('transition','none');requestAnimationFrame(function(){element.addClass(initClass);if(isIn)element.show();});// Start the animation\nrequestAnimationFrame(function(){element[0].offsetWidth;element.css('transition','').addClass(activeClass);});// Clean up the animation when it finishes\nelement.one(Foundation.transitionend(element),finish);// Hides the element (for out animations), resets the element, and runs a callback\nfunction finish(){if(!isIn)element.hide();reset();if(cb)cb.apply(element);}// Resets transitions and removes motion-specific classes\nfunction reset(){element[0].style.transitionDuration=0;element.removeClass(initClass+' '+activeClass+' '+animation);}}Foundation.Move=Move;Foundation.Motion=Motion;}(jQuery);'use strict';!function($){var Nest={Feather:function Feather(menu){var type=arguments.length<=1||arguments[1]===undefined?'zf':arguments[1];menu.attr('role','menubar');var items=menu.find('li').attr({'role':'menuitem'}),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('a:first').attr('tabindex',0);items.each(function(){var $item=$(this),$sub=$item.children('ul');if($sub.length){$item.addClass(hasSubClass).attr({'aria-haspopup':true,'aria-expanded':false,'aria-label':$item.children('a:first').text()});$sub.addClass('submenu '+subMenuClass).attr({'data-submenu':'','aria-hidden':true,'role':'menu'});}if($item.parent('[data-submenu]').length){$item.addClass('is-submenu-item '+subItemClass);}});return;},Burn:function Burn(menu,type){var items=menu.find('li').removeAttr('tabindex'),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('*').removeClass(subMenuClass+' '+subItemClass+' '+hasSubClass+' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display','');// console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')\n//           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')\n//           .removeAttr('data-submenu'));\n// items.each(function(){\n//   var $item = $(this),\n//       $sub = $item.children('ul');\n//   if($item.parent('[data-submenu]').length){\n//     $item.removeClass('is-submenu-item ' + subItemClass);\n//   }\n//   if($sub.length){\n//     $item.removeClass('has-submenu');\n//     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');\n//   }\n// });\n}};Foundation.Nest=Nest;}(jQuery);'use strict';!function($){function Timer(elem,options,cb){var _this=this,duration=options.duration,//options is an object for easily adding features later.\nnameSpace=Object.keys(elem.data())[0]||'timer',remain=-1,start,timer;this.isPaused=false;this.restart=function(){remain=-1;clearTimeout(timer);this.start();};this.start=function(){this.isPaused=false;// if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\nclearTimeout(timer);remain=remain<=0?duration:remain;elem.data('paused',false);start=Date.now();timer=setTimeout(function(){if(options.infinite){_this.restart();//rerun the timer.\n}cb();},remain);elem.trigger('timerstart.zf.'+nameSpace);};this.pause=function(){this.isPaused=true;//if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\nclearTimeout(timer);elem.data('paused',true);var end=Date.now();remain=remain-(end-start);elem.trigger('timerpaused.zf.'+nameSpace);};}/**\n   * Runs a callback function when images are fully loaded.\n   * @param {Object} images - Image(s) to check if loaded.\n   * @param {Func} callback - Function to execute when image is fully loaded.\n   */function onImagesLoaded(images,callback){var self=this,unloaded=images.length;if(unloaded===0){callback();}images.each(function(){if(this.complete){singleImageLoaded();}else if(typeof this.naturalWidth!=='undefined'&&this.naturalWidth>0){singleImageLoaded();}else{$(this).one('load',function(){singleImageLoaded();});}});function singleImageLoaded(){unloaded--;if(unloaded===0){callback();}}}Foundation.Timer=Timer;Foundation.onImagesLoaded=onImagesLoaded;}(jQuery);//**************************************************\n//**Work inspired by multiple jquery swipe plugins**\n//**Done by Yohai Ararat ***************************\n//**************************************************\n(function($){$.spotSwipe={version:'1.0.0',enabled:'ontouchstart'in document.documentElement,preventDefault:false,moveThreshold:75,timeThreshold:200};var startPosX,startPosY,startTime,elapsedTime,isMoving=false;function onTouchEnd(){//  alert(this);\nthis.removeEventListener('touchmove',onTouchMove);this.removeEventListener('touchend',onTouchEnd);isMoving=false;}function onTouchMove(e){if($.spotSwipe.preventDefault){e.preventDefault();}if(isMoving){var x=e.touches[0].pageX;var y=e.touches[0].pageY;var dx=startPosX-x;var dy=startPosY-y;var dir;elapsedTime=new Date().getTime()-startTime;if(Math.abs(dx)>=$.spotSwipe.moveThreshold&&elapsedTime<=$.spotSwipe.timeThreshold){dir=dx>0?'left':'right';}// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n//   dir = dy > 0 ? 'down' : 'up';\n// }\nif(dir){e.preventDefault();onTouchEnd.call(this);$(this).trigger('swipe',dir).trigger('swipe'+dir);}}}function onTouchStart(e){if(e.touches.length==1){startPosX=e.touches[0].pageX;startPosY=e.touches[0].pageY;isMoving=true;startTime=new Date().getTime();this.addEventListener('touchmove',onTouchMove,false);this.addEventListener('touchend',onTouchEnd,false);}}function init(){this.addEventListener&&this.addEventListener('touchstart',onTouchStart,false);}function teardown(){this.removeEventListener('touchstart',onTouchStart);}$.event.special.swipe={setup:init};$.each(['left','up','down','right'],function(){$.event.special['swipe'+this]={setup:function setup(){$(this).on('swipe',$.noop);}};});})(jQuery);/****************************************************\n * Method for adding psuedo drag events to elements *\n ***************************************************/!function($){$.fn.addTouch=function(){this.each(function(i,el){$(el).bind('touchstart touchmove touchend touchcancel',function(){//we pass the original event object because the jQuery event\n//object is normalized to w3c specs and does not provide the TouchList\nhandleTouch(event);});});var handleTouch=function handleTouch(event){var touches=event.changedTouches,first=touches[0],eventTypes={touchstart:'mousedown',touchmove:'mousemove',touchend:'mouseup'},type=eventTypes[event.type],simulatedEvent;if('MouseEvent'in window&&typeof window.MouseEvent==='function'){simulatedEvent=new window.MouseEvent(type,{'bubbles':true,'cancelable':true,'screenX':first.screenX,'screenY':first.screenY,'clientX':first.clientX,'clientY':first.clientY});}else{simulatedEvent=document.createEvent('MouseEvent');simulatedEvent.initMouseEvent(type,true,true,window,1,first.screenX,first.screenY,first.clientX,first.clientY,false,false,false,false,0/*left*/,null);}first.target.dispatchEvent(simulatedEvent);};};}(jQuery);//**********************************\n//**From the jQuery Mobile Library**\n//**need to recreate functionality**\n//**and try to improve if possible**\n//**********************************\n/* Removing the jQuery function ****\n************************************\n\n(function( $, window, undefined ) {\n\n\tvar $document = $( document ),\n\t\t// supportTouch = $.mobile.support.touch,\n\t\ttouchStartEvent = 'touchstart'//supportTouch ? \"touchstart\" : \"mousedown\",\n\t\ttouchStopEvent = 'touchend'//supportTouch ? \"touchend\" : \"mouseup\",\n\t\ttouchMoveEvent = 'touchmove'//supportTouch ? \"touchmove\" : \"mousemove\";\n\n\t// setup new event shortcuts\n\t$.each( ( \"touchstart touchmove touchend \" +\n\t\t\"swipe swipeleft swiperight\" ).split( \" \" ), function( i, name ) {\n\n\t\t$.fn[ name ] = function( fn ) {\n\t\t\treturn fn ? this.bind( name, fn ) : this.trigger( name );\n\t\t};\n\n\t\t// jQuery < 1.8\n\t\tif ( $.attrFn ) {\n\t\t\t$.attrFn[ name ] = true;\n\t\t}\n\t});\n\n\tfunction triggerCustomEvent( obj, eventType, event, bubble ) {\n\t\tvar originalType = event.type;\n\t\tevent.type = eventType;\n\t\tif ( bubble ) {\n\t\t\t$.event.trigger( event, undefined, obj );\n\t\t} else {\n\t\t\t$.event.dispatch.call( obj, event );\n\t\t}\n\t\tevent.type = originalType;\n\t}\n\n\t// also handles taphold\n\n\t// Also handles swipeleft, swiperight\n\t$.event.special.swipe = {\n\n\t\t// More than this horizontal displacement, and we will suppress scrolling.\n\t\tscrollSupressionThreshold: 30,\n\n\t\t// More time than this, and it isn't a swipe.\n\t\tdurationThreshold: 1000,\n\n\t\t// Swipe horizontal displacement must be more than this.\n\t\thorizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\n\t\t// Swipe vertical displacement must be less than this.\n\t\tverticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\n\t\tgetLocation: function ( event ) {\n\t\t\tvar winPageX = window.pageXOffset,\n\t\t\t\twinPageY = window.pageYOffset,\n\t\t\t\tx = event.clientX,\n\t\t\t\ty = event.clientY;\n\n\t\t\tif ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||\n\t\t\t\tevent.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {\n\n\t\t\t\t// iOS4 clientX/clientY have the value that should have been\n\t\t\t\t// in pageX/pageY. While pageX/page/ have the value 0\n\t\t\t\tx = x - winPageX;\n\t\t\t\ty = y - winPageY;\n\t\t\t} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {\n\n\t\t\t\t// Some Android browsers have totally bogus values for clientX/Y\n\t\t\t\t// when scrolling/zooming a page. Detectable since clientX/clientY\n\t\t\t\t// should never be smaller than pageX/pageY minus page scroll\n\t\t\t\tx = event.pageX - winPageX;\n\t\t\t\ty = event.pageY - winPageY;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t};\n\t\t},\n\n\t\tstart: function( event ) {\n\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\treturn {\n\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\tcoords: [ location.x, location.y ],\n\t\t\t\t\t\torigin: $( event.target )\n\t\t\t\t\t};\n\t\t},\n\n\t\tstop: function( event ) {\n\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\treturn {\n\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\tcoords: [ location.x, location.y ]\n\t\t\t\t\t};\n\t\t},\n\n\t\thandleSwipe: function( start, stop, thisObject, origTarget ) {\n\t\t\tif ( stop.time - start.time < $.event.special.swipe.durationThreshold &&\n\t\t\t\tMath.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&\n\t\t\t\tMath.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {\n\t\t\t\tvar direction = start.coords[0] > stop.coords[ 0 ] ? \"swipeleft\" : \"swiperight\";\n\n\t\t\t\ttriggerCustomEvent( thisObject, \"swipe\", $.Event( \"swipe\", { target: origTarget, swipestart: start, swipestop: stop }), true );\n\t\t\t\ttriggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\n\t\t},\n\n\t\t// This serves as a flag to ensure that at most one swipe event event is\n\t\t// in work at any given time\n\t\teventInProgress: false,\n\n\t\tsetup: function() {\n\t\t\tvar events,\n\t\t\t\tthisObject = this,\n\t\t\t\t$this = $( thisObject ),\n\t\t\t\tcontext = {};\n\n\t\t\t// Retrieve the events data for this element and add the swipe context\n\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\tif ( !events ) {\n\t\t\t\tevents = { length: 0 };\n\t\t\t\t$.data( this, \"mobile-events\", events );\n\t\t\t}\n\t\t\tevents.length++;\n\t\t\tevents.swipe = context;\n\n\t\t\tcontext.start = function( event ) {\n\n\t\t\t\t// Bail if we're already working on a swipe event\n\t\t\t\tif ( $.event.special.swipe.eventInProgress ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$.event.special.swipe.eventInProgress = true;\n\n\t\t\t\tvar stop,\n\t\t\t\t\tstart = $.event.special.swipe.start( event ),\n\t\t\t\t\torigTarget = event.target,\n\t\t\t\t\temitted = false;\n\n\t\t\t\tcontext.move = function( event ) {\n\t\t\t\t\tif ( !start || event.isDefaultPrevented() ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstop = $.event.special.swipe.stop( event );\n\t\t\t\t\tif ( !emitted ) {\n\t\t\t\t\t\temitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );\n\t\t\t\t\t\tif ( emitted ) {\n\n\t\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// prevent scrolling\n\t\t\t\t\tif ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tcontext.stop = function() {\n\t\t\t\t\t\temitted = true;\n\n\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t\t\tcontext.move = null;\n\t\t\t\t};\n\n\t\t\t\t$document.on( touchMoveEvent, context.move )\n\t\t\t\t\t.one( touchStopEvent, context.stop );\n\t\t\t};\n\t\t\t$this.on( touchStartEvent, context.start );\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar events, context;\n\n\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\tif ( events ) {\n\t\t\t\tcontext = events.swipe;\n\t\t\t\tdelete events.swipe;\n\t\t\t\tevents.length--;\n\t\t\t\tif ( events.length === 0 ) {\n\t\t\t\t\t$.removeData( this, \"mobile-events\" );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( context ) {\n\t\t\t\tif ( context.start ) {\n\t\t\t\t\t$( this ).off( touchStartEvent, context.start );\n\t\t\t\t}\n\t\t\t\tif ( context.move ) {\n\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t}\n\t\t\t\tif ( context.stop ) {\n\t\t\t\t\t$document.off( touchStopEvent, context.stop );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t$.each({\n\t\tswipeleft: \"swipe.left\",\n\t\tswiperight: \"swipe.right\"\n\t}, function( event, sourceEvent ) {\n\n\t\t$.event.special[ event ] = {\n\t\t\tsetup: function() {\n\t\t\t\t$( this ).bind( sourceEvent, $.noop );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\t$( this ).unbind( sourceEvent );\n\t\t\t}\n\t\t};\n\t});\n})( jQuery, this );\n*/'use strict';!function($){var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){$('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};// Elements with [data-open] will reveal a plugin that supports it when clicked.\n$(document).on('click.zf.trigger','[data-open]',function(){triggers($(this),'open');});// Elements with [data-close] will close a plugin that supports it when clicked.\n// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\n$(document).on('click.zf.trigger','[data-close]',function(){var id=$(this).data('close');if(id){triggers($(this),'close');}else{$(this).trigger('close.zf.trigger');}});// Elements with [data-toggle] will toggle a plugin that supports it when clicked.\n$(document).on('click.zf.trigger','[data-toggle]',function(){triggers($(this),'toggle');});// Elements with [data-closable] will respond to close.zf.trigger events.\n$(document).on('close.zf.trigger','[data-closable]',function(e){e.stopPropagation();var animation=$(this).data('closable');if(animation!==''){Foundation.Motion.animateOut($(this),animation,function(){$(this).trigger('closed.zf');});}else{$(this).fadeOut().trigger('closed.zf');}});$(document).on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',function(){var id=$(this).data('toggle-focus');$('#'+id).triggerHandler('toggle.zf.trigger',[$(this)]);});/**\n  * Fires once after all other scripts have loaded\n  * @function\n  * @private\n  */$(window).load(function(){checkListeners();});function checkListeners(){eventsListener();resizeListener();scrollListener();closemeListener();}//******** only fires this function once on load, if there's something to watch ********\nfunction closemeListener(pluginName){var yetiBoxes=$('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');$(window).off(listeners).on(listeners,function(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=$('[data-'+plugin+']').not('[data-yeti-box=\"'+pluginId+'\"]');plugins.each(function(){var _this=$(this);_this.triggerHandler('close.zf.trigger',[_this]);});});}}function resizeListener(debounce){var timer=void 0,$nodes=$('[data-resize]');if($nodes.length){$(window).off('resize.zf.trigger').on('resize.zf.trigger',function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){if(!MutationObserver){//fallback for IE 9\n$nodes.each(function(){$(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event\n$nodes.attr('data-events',\"resize\");},debounce||10);//default time to emit resize event\n});}}function scrollListener(debounce){var timer=void 0,$nodes=$('[data-scroll]');if($nodes.length){$(window).off('scroll.zf.trigger').on('scroll.zf.trigger',function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){if(!MutationObserver){//fallback for IE 9\n$nodes.each(function(){$(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event\n$nodes.attr('data-events',\"scroll\");},debounce||10);//default time to emit scroll event\n});}}function eventsListener(){if(!MutationObserver){return false;}var nodes=document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');//element callback\nvar listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=$(mutationRecordsList[0].target);//trigger the event handler for the element depending on type\nswitch($target.attr(\"data-events\")){case\"resize\":$target.triggerHandler('resizeme.zf.trigger',[$target]);break;case\"scroll\":$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);break;// case \"mutate\" :\n// console.log('mutate', $target);\n// $target.triggerHandler('mutate.zf.trigger');\n//\n// //make sure we don't get stuck in an infinite loop from sloppy codeing\n// if ($target.index('[data-mutate]') == $(\"[data-mutate]\").length-1) {\n//   domMutationObserver();\n// }\n// break;\ndefault:return false;//nothing\n}};if(nodes.length){//for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer\nfor(var i=0;i<=nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe(nodes[i],{attributes:true,childList:false,characterData:false,subtree:false,attributeFilter:[\"data-events\"]});}}}// ------------------------------------\n// [PH]\n// Foundation.CheckWatchers = checkWatchers;\nFoundation.IHearYou=checkListeners;// Foundation.ISeeYou = scrollListener;\n// Foundation.IFeelYou = closemeListener;\n}(jQuery);// function domMutationObserver(debounce) {\n//   // !!! This is coming soon and needs more work; not active  !!! //\n//   var timer,\n//   nodes = document.querySelectorAll('[data-mutate]');\n//   //\n//   if (nodes.length) {\n//     // var MutationObserver = (function () {\n//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n//     //   for (var i=0; i < prefixes.length; i++) {\n//     //     if (prefixes[i] + 'MutationObserver' in window) {\n//     //       return window[prefixes[i] + 'MutationObserver'];\n//     //     }\n//     //   }\n//     //   return false;\n//     // }());\n//\n//\n//     //for the body, we need to listen for all changes effecting the style and class attributes\n//     var bodyObserver = new MutationObserver(bodyMutation);\n//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:[\"style\", \"class\"]});\n//\n//\n//     //body callback\n//     function bodyMutation(mutate) {\n//       //trigger all listening elements and signal a mutation event\n//       if (timer) { clearTimeout(timer); }\n//\n//       timer = setTimeout(function() {\n//         bodyObserver.disconnect();\n//         $('[data-mutate]').attr('data-events',\"mutate\");\n//       }, debounce || 150);\n//     }\n//   }\n// }\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Abide module.\n   * @module foundation.abide\n   */var Abide=function(){/**\n     * Creates a new instance of Abide.\n     * @class\n     * @fires Abide#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Abide(element){var options=arguments.length<=1||arguments[1]===undefined?{}:arguments[1];_classCallCheck(this,Abide);this.$element=element;this.options=$.extend({},Abide.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Abide');}/**\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n     * @private\n     */_createClass(Abide,[{key:'_init',value:function _init(){this.$inputs=this.$element.find('input, textarea, select');this._events();}/**\n       * Initializes events for Abide.\n       * @private\n       */},{key:'_events',value:function _events(){var _this2=this;this.$element.off('.abide').on('reset.zf.abide',function(){_this2.resetForm();}).on('submit.zf.abide',function(){return _this2.validateForm();});if(this.options.validateOn==='fieldChange'){this.$inputs.off('change.zf.abide').on('change.zf.abide',function(e){_this2.validateInput($(e.target));});}if(this.options.liveValidate){this.$inputs.off('input.zf.abide').on('input.zf.abide',function(e){_this2.validateInput($(e.target));});}}/**\n       * Calls necessary functions to update Abide upon DOM change\n       * @private\n       */},{key:'_reflow',value:function _reflow(){this._init();}/**\n       * Checks whether or not a form element has the required attribute and if it's checked or not\n       * @param {Object} element - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */},{key:'requiredCheck',value:function requiredCheck($el){if(!$el.attr('required'))return true;var isGood=true;switch($el[0].type){case'checkbox':isGood=$el[0].checked;break;case'select':case'select-one':case'select-multiple':var opt=$el.find('option:selected');if(!opt.length||!opt.val())isGood=false;break;default:if(!$el.val()||!$el.val().length)isGood=false;}return isGood;}/**\n       * Based on $el, get the first element with selector in this order:\n       * 1. The element's direct sibling('s).\n       * 3. The element's parent's children.\n       *\n       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n       *\n       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n       * @returns {Object} jQuery object with the selector.\n       */},{key:'findFormError',value:function findFormError($el){var $error=$el.siblings(this.options.formErrorSelector);if(!$error.length){$error=$el.parent().find(this.options.formErrorSelector);}return $error;}/**\n       * Get the first element in this order:\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */},{key:'findLabel',value:function findLabel($el){var id=$el[0].id;var $label=this.$element.find('label[for=\"'+id+'\"]');if(!$label.length){return $el.closest('label');}return $label;}/**\n       * Get the set of labels associated with a set of radio els in this order\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */},{key:'findRadioLabels',value:function findRadioLabels($els){var _this3=this;var labels=$els.map(function(i,el){var id=el.id;var $label=_this3.$element.find('label[for=\"'+id+'\"]');if(!$label.length){$label=$(el).closest('label');}return $label[0];});return $(labels);}/**\n       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n       * @param {Object} $el - jQuery object to add the class to\n       */},{key:'addErrorClasses',value:function addErrorClasses($el){var $label=this.findLabel($el);var $formError=this.findFormError($el);if($label.length){$label.addClass(this.options.labelErrorClass);}if($formError.length){$formError.addClass(this.options.formErrorClass);}$el.addClass(this.options.inputErrorClass).attr('data-invalid','');}/**\n       * Remove CSS error classes etc from an entire radio button group\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       *\n       */},{key:'removeRadioErrorClasses',value:function removeRadioErrorClasses(groupName){var $els=this.$element.find(':radio[name=\"'+groupName+'\"]');var $labels=this.findRadioLabels($els);var $formErrors=this.findFormError($els);if($labels.length){$labels.removeClass(this.options.labelErrorClass);}if($formErrors.length){$formErrors.removeClass(this.options.formErrorClass);}$els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');}/**\n       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n       * @param {Object} $el - jQuery object to remove the class from\n       */},{key:'removeErrorClasses',value:function removeErrorClasses($el){// radios need to clear all of the els\nif($el[0].type=='radio'){return this.removeRadioErrorClasses($el.attr('name'));}var $label=this.findLabel($el);var $formError=this.findFormError($el);if($label.length){$label.removeClass(this.options.labelErrorClass);}if($formError.length){$formError.removeClass(this.options.formErrorClass);}$el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');}/**\n       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n       * @fires Abide#invalid\n       * @fires Abide#valid\n       * @param {Object} element - jQuery object to validate, should be an HTML input\n       * @returns {Boolean} goodToGo - If the input is valid or not.\n       */},{key:'validateInput',value:function validateInput($el){var clearRequire=this.requiredCheck($el),validated=false,customValidator=true,validator=$el.attr('data-validator'),equalTo=true;// don't validate ignored inputs or hidden inputs\nif($el.is('[data-abide-ignore]')||$el.is('[type=\"hidden\"]')){return true;}switch($el[0].type){case'radio':validated=this.validateRadio($el.attr('name'));break;case'checkbox':validated=clearRequire;break;case'select':case'select-one':case'select-multiple':validated=clearRequire;break;default:validated=this.validateText($el);}if(validator){customValidator=this.matchValidation($el,validator,$el.attr('required'));}if($el.attr('data-equalto')){equalTo=this.options.validators.equalTo($el);}var goodToGo=[clearRequire,validated,customValidator,equalTo].indexOf(false)===-1;var message=(goodToGo?'valid':'invalid')+'.zf.abide';this[goodToGo?'removeErrorClasses':'addErrorClasses']($el);/**\n         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n         * Trigger includes the DOM element of the input.\n         * @event Abide#valid\n         * @event Abide#invalid\n         */$el.trigger(message,[$el]);return goodToGo;}/**\n       * Goes through a form and if there are any invalid inputs, it will display the form error element\n       * @returns {Boolean} noError - true if no errors were detected...\n       * @fires Abide#formvalid\n       * @fires Abide#forminvalid\n       */},{key:'validateForm',value:function validateForm(){var acc=[];var _this=this;this.$inputs.each(function(){acc.push(_this.validateInput($(this)));});var noError=acc.indexOf(false)===-1;this.$element.find('[data-abide-error]').css('display',noError?'none':'block');/**\n         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n         * Trigger includes the element of the form.\n         * @event Abide#formvalid\n         * @event Abide#forminvalid\n         */this.$element.trigger((noError?'formvalid':'forminvalid')+'.zf.abide',[this.$element]);return noError;}/**\n       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n       */},{key:'validateText',value:function validateText($el,pattern){// A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\npattern=pattern||$el.attr('pattern')||$el.attr('type');var inputText=$el.val();var valid=false;if(inputText.length){// If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\nif(this.options.patterns.hasOwnProperty(pattern)){valid=this.options.patterns[pattern].test(inputText);}// If the pattern name isn't also the type attribute of the field, then test it as a regexp\nelse if(pattern!==$el.attr('type')){valid=new RegExp(pattern).test(inputText);}else{valid=true;}}// An empty field is valid if it's not required\nelse if(!$el.prop('required')){valid=true;}return valid;}/**\n       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n       */},{key:'validateRadio',value:function validateRadio(groupName){// If at least one radio in the group has the `required` attribute, the group is considered required\n// Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\nvar $group=this.$element.find(':radio[name=\"'+groupName+'\"]');var valid=false,required=false;// For the group to be required, at least one radio needs to be required\n$group.each(function(i,e){if($(e).attr('required')){required=true;}});if(!required)valid=true;if(!valid){// For the group to be valid, at least one radio needs to be checked\n$group.each(function(i,e){if($(e).prop('checked')){valid=true;}});};return valid;}/**\n       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n       * @param {Object} $el - jQuery input element.\n       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n       * @param {Boolean} required - self explanatory?\n       * @returns {Boolean} - true if validations passed.\n       */},{key:'matchValidation',value:function matchValidation($el,validators,required){var _this4=this;required=required?true:false;var clear=validators.split(' ').map(function(v){return _this4.options.validators[v]($el,required,$el.parent());});return clear.indexOf(false)===-1;}/**\n       * Resets form inputs and styles\n       * @fires Abide#formreset\n       */},{key:'resetForm',value:function resetForm(){var $form=this.$element,opts=this.options;$('.'+opts.labelErrorClass,$form).not('small').removeClass(opts.labelErrorClass);$('.'+opts.inputErrorClass,$form).not('small').removeClass(opts.inputErrorClass);$(opts.formErrorSelector+'.'+opts.formErrorClass).removeClass(opts.formErrorClass);$form.find('[data-abide-error]').css('display','none');$(':input',$form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');$(':input:radio',$form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');$(':input:checkbox',$form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');/**\n         * Fires when the form has been reset.\n         * @event Abide#formreset\n         */$form.trigger('formreset.zf.abide',[$form]);}/**\n       * Destroys an instance of Abide.\n       * Removes error styles and classes from elements, without resetting their values.\n       */},{key:'destroy',value:function destroy(){var _this=this;this.$element.off('.abide').find('[data-abide-error]').css('display','none');this.$inputs.off('.abide').each(function(){_this.removeErrorClasses($(this));});Foundation.unregisterPlugin(this);}}]);return Abide;}();/**\n   * Default settings for plugin\n   */Abide.defaults={/**\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\n     * Remove or change this value for manual validation.\n     * @option\n     * @example 'fieldChange'\n     */validateOn:'fieldChange',/**\n     * Class to be applied to input labels on failed validation.\n     * @option\n     * @example 'is-invalid-label'\n     */labelErrorClass:'is-invalid-label',/**\n     * Class to be applied to inputs on failed validation.\n     * @option\n     * @example 'is-invalid-input'\n     */inputErrorClass:'is-invalid-input',/**\n     * Class selector to use to target Form Errors for show/hide.\n     * @option\n     * @example '.form-error'\n     */formErrorSelector:'.form-error',/**\n     * Class added to Form Errors on failed validation.\n     * @option\n     * @example 'is-visible'\n     */formErrorClass:'is-visible',/**\n     * Set to true to validate text inputs on any value change.\n     * @option\n     * @example false\n     */liveValidate:false,patterns:{alpha:/^[a-zA-Z]+$/,alpha_numeric:/^[a-zA-Z0-9]+$/,integer:/^[-+]?\\d+$/,number:/^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,// amex, visa, diners\ncard:/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,cvv:/^([0-9]){3,4}$/,// http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\nemail:/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,url:/^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,// abc.de\ndomain:/^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,datetime:/^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,// YYYY-MM-DD\ndate:/(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,// HH:MM:SS\ntime:/^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,dateISO:/^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,// MM/DD/YYYY\nmonth_day_year:/^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,// DD/MM/YYYY\nday_month_year:/^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,// #FFF or #FFFFFF\ncolor:/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/},/**\n     * Optional validation functions to be used. `equalTo` being the only default included function.\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n     * el : The jQuery element to validate.\n     * required : Boolean value of the required attribute be present or not.\n     * parent : The direct parent of the input.\n     * @option\n     */validators:{equalTo:function equalTo(el,required,parent){return $('#'+el.attr('data-equalto')).val()===el.val();}}};// Window exports\nFoundation.plugin(Abide,'Abide');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Accordion module.\n   * @module foundation.accordion\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   */var Accordion=function(){/**\n     * Creates a new instance of an accordion.\n     * @class\n     * @fires Accordion#init\n     * @param {jQuery} element - jQuery object to make into an accordion.\n     * @param {Object} options - a plain object with settings to override the default options.\n     */function Accordion(element,options){_classCallCheck(this,Accordion);this.$element=element;this.options=$.extend({},Accordion.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Accordion');Foundation.Keyboard.register('Accordion',{'ENTER':'toggle','SPACE':'toggle','ARROW_DOWN':'next','ARROW_UP':'previous'});}/**\n     * Initializes the accordion by animating the preset active pane(s).\n     * @private\n     */_createClass(Accordion,[{key:'_init',value:function _init(){this.$element.attr('role','tablist');this.$tabs=this.$element.children('li, [data-accordion-item]');this.$tabs.each(function(idx,el){var $el=$(el),$content=$el.children('[data-tab-content]'),id=$content[0].id||Foundation.GetYoDigits(6,'accordion'),linkId=el.id||id+'-label';$el.find('a:first').attr({'aria-controls':id,'role':'tab','id':linkId,'aria-expanded':false,'aria-selected':false});$content.attr({'role':'tabpanel','aria-labelledby':linkId,'aria-hidden':true,'id':id});});var $initActive=this.$element.find('.is-active').children('[data-tab-content]');if($initActive.length){this.down($initActive,true);}this._events();}/**\n       * Adds event handlers for items within the accordion.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this.$tabs.each(function(){var $elem=$(this);var $tabContent=$elem.children('[data-tab-content]');if($tabContent.length){$elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion',function(e){// $(this).children('a').on('click.zf.accordion', function(e) {\ne.preventDefault();if($elem.hasClass('is-active')){if(_this.options.allowAllClosed||$elem.siblings().hasClass('is-active')){_this.up($tabContent);}}else{_this.down($tabContent);}}).on('keydown.zf.accordion',function(e){Foundation.Keyboard.handleKey(e,'Accordion',{toggle:function toggle(){_this.toggle($tabContent);},next:function next(){var $a=$elem.next().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},previous:function previous(){var $a=$elem.prev().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},handled:function handled(){e.preventDefault();e.stopPropagation();}});});}});}/**\n       * Toggles the selected content pane's open/close state.\n       * @param {jQuery} $target - jQuery object of the pane to toggle.\n       * @function\n       */},{key:'toggle',value:function toggle($target){if($target.parent().hasClass('is-active')){if(this.options.allowAllClosed||$target.parent().siblings().hasClass('is-active')){this.up($target);}else{return;}}else{this.down($target);}}/**\n       * Opens the accordion tab defined by `$target`.\n       * @param {jQuery} $target - Accordion pane to open.\n       * @param {Boolean} firstTime - flag to determine if reflow should happen.\n       * @fires Accordion#down\n       * @function\n       */},{key:'down',value:function down($target,firstTime){var _this2=this;if(!this.options.multiExpand&&!firstTime){var $currentActive=this.$element.children('.is-active').children('[data-tab-content]');if($currentActive.length){this.up($currentActive);}}$target.attr('aria-hidden',false).parent('[data-tab-content]').addBack().parent().addClass('is-active');$target.slideDown(this.options.slideSpeed,function(){/**\n           * Fires when the tab is done opening.\n           * @event Accordion#down\n           */_this2.$element.trigger('down.zf.accordion',[$target]);});$('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':true,'aria-selected':true});}/**\n       * Closes the tab defined by `$target`.\n       * @param {jQuery} $target - Accordion tab to close.\n       * @fires Accordion#up\n       * @function\n       */},{key:'up',value:function up($target){var $aunts=$target.parent().siblings(),_this=this;var canClose=this.options.multiExpand?$aunts.hasClass('is-active'):$target.parent().hasClass('is-active');if(!this.options.allowAllClosed&&!canClose){return;}// Foundation.Move(this.options.slideSpeed, $target, function(){\n$target.slideUp(_this.options.slideSpeed,function(){/**\n           * Fires when the tab is done collapsing up.\n           * @event Accordion#up\n           */_this.$element.trigger('up.zf.accordion',[$target]);});// });\n$target.attr('aria-hidden',true).parent().removeClass('is-active');$('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':false,'aria-selected':false});}/**\n       * Destroys an instance of an accordion.\n       * @fires Accordion#destroyed\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display','');this.$element.find('a').off('.zf.accordion');Foundation.unregisterPlugin(this);}}]);return Accordion;}();Accordion.defaults={/**\n     * Amount of time to animate the opening of an accordion pane.\n     * @option\n     * @example 250\n     */slideSpeed:250,/**\n     * Allow the accordion to have multiple open panes.\n     * @option\n     * @example false\n     */multiExpand:false,/**\n     * Allow the accordion to close all panes.\n     * @option\n     * @example false\n     */allowAllClosed:false};// Window exports\nFoundation.plugin(Accordion,'Accordion');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * AccordionMenu module.\n   * @module foundation.accordionMenu\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.nest\n   */var AccordionMenu=function(){/**\n     * Creates a new instance of an accordion menu.\n     * @class\n     * @fires AccordionMenu#init\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function AccordionMenu(element,options){_classCallCheck(this,AccordionMenu);this.$element=element;this.options=$.extend({},AccordionMenu.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'accordion');this._init();Foundation.registerPlugin(this,'AccordionMenu');Foundation.Keyboard.register('AccordionMenu',{'ENTER':'toggle','SPACE':'toggle','ARROW_RIGHT':'open','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'close','ESCAPE':'closeAll','TAB':'down','SHIFT_TAB':'up'});}/**\n     * Initializes the accordion menu by hiding all nested menus.\n     * @private\n     */_createClass(AccordionMenu,[{key:'_init',value:function _init(){this.$element.find('[data-submenu]').not('.is-active').slideUp(0);//.find('a').css('padding-left', '1rem');\nthis.$element.attr({'role':'tablist','aria-multiselectable':this.options.multiOpen});this.$menuLinks=this.$element.find('.is-accordion-submenu-parent');this.$menuLinks.each(function(){var linkId=this.id||Foundation.GetYoDigits(6,'acc-menu-link'),$elem=$(this),$sub=$elem.children('[data-submenu]'),subId=$sub[0].id||Foundation.GetYoDigits(6,'acc-menu'),isActive=$sub.hasClass('is-active');$elem.attr({'aria-controls':subId,'aria-expanded':isActive,'role':'tab','id':linkId});$sub.attr({'aria-labelledby':linkId,'aria-hidden':!isActive,'role':'tabpanel','id':subId});});var initPanes=this.$element.find('.is-active');if(initPanes.length){var _this=this;initPanes.each(function(){_this.down($(this));});}this._events();}/**\n       * Adds event handlers for items within the menu.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this.$element.find('li').each(function(){var $submenu=$(this).children('[data-submenu]');if($submenu.length){$(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu',function(e){e.preventDefault();_this.toggle($submenu);});}}).on('keydown.zf.accordionmenu',function(e){var $element=$(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement,$target=$element.children('[data-submenu]');$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1)).find('a').first();$nextElement=$elements.eq(Math.min(i+1,$elements.length-1)).find('a').first();if($(this).children('[data-submenu]:visible').length){// has open sub menu\n$nextElement=$element.find('li:first-child').find('a').first();}if($(this).is(':first-child')){// is first element of sub menu\n$prevElement=$element.parents('li').first().find('a').first();}else if($prevElement.children('[data-submenu]:visible').length){// if previous element has open sub menu\n$prevElement=$prevElement.find('li:last-child').find('a').first();}if($(this).is(':last-child')){// is last element of sub menu\n$nextElement=$element.parents('li').first().next('li').find('a').first();}return;}});Foundation.Keyboard.handleKey(e,'AccordionMenu',{open:function open(){if($target.is(':hidden')){_this.down($target);$target.find('li').first().find('a').first().focus();}},close:function close(){if($target.length&&!$target.is(':hidden')){// close active sub of this item\n_this.up($target);}else if($element.parent('[data-submenu]').length){// close currently open sub\n_this.up($element.parent('[data-submenu]'));$element.parents('li').first().find('a').first().focus();}},up:function up(){$prevElement.attr('tabindex',-1).focus();return true;},down:function down(){$nextElement.attr('tabindex',-1).focus();return true;},toggle:function toggle(){if($element.children('[data-submenu]').length){_this.toggle($element.children('[data-submenu]'));}},closeAll:function closeAll(){_this.hideAll();},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});//.attr('tabindex', 0);\n}/**\n       * Closes all panes of the menu.\n       * @function\n       */},{key:'hideAll',value:function hideAll(){this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);}/**\n       * Toggles the open/close state of a submenu.\n       * @function\n       * @param {jQuery} $target - the submenu to toggle\n       */},{key:'toggle',value:function toggle($target){if(!$target.is(':animated')){if(!$target.is(':hidden')){this.up($target);}else{this.down($target);}}}/**\n       * Opens the sub-menu defined by `$target`.\n       * @param {jQuery} $target - Sub-menu to open.\n       * @fires AccordionMenu#down\n       */},{key:'down',value:function down($target){var _this=this;if(!this.options.multiOpen){this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));}$target.addClass('is-active').attr({'aria-hidden':false}).parent('.is-accordion-submenu-parent').attr({'aria-expanded':true});//Foundation.Move(this.options.slideSpeed, $target, function() {\n$target.slideDown(_this.options.slideSpeed,function(){/**\n           * Fires when the menu is done opening.\n           * @event AccordionMenu#down\n           */_this.$element.trigger('down.zf.accordionMenu',[$target]);});//});\n}/**\n       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\n       * @param {jQuery} $target - Sub-menu to close.\n       * @fires AccordionMenu#up\n       */},{key:'up',value:function up($target){var _this=this;//Foundation.Move(this.options.slideSpeed, $target, function(){\n$target.slideUp(_this.options.slideSpeed,function(){/**\n           * Fires when the menu is done collapsing up.\n           * @event AccordionMenu#up\n           */_this.$element.trigger('up.zf.accordionMenu',[$target]);});//});\nvar $menus=$target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden',true);$menus.parent('.is-accordion-submenu-parent').attr('aria-expanded',false);}/**\n       * Destroys an instance of accordion menu.\n       * @fires AccordionMenu#destroyed\n       */},{key:'destroy',value:function destroy(){this.$element.find('[data-submenu]').slideDown(0).css('display','');this.$element.find('a').off('click.zf.accordionMenu');Foundation.Nest.Burn(this.$element,'accordion');Foundation.unregisterPlugin(this);}}]);return AccordionMenu;}();AccordionMenu.defaults={/**\n     * Amount of time to animate the opening of a submenu in ms.\n     * @option\n     * @example 250\n     */slideSpeed:250,/**\n     * Allow the menu to have multiple open panes.\n     * @option\n     * @example true\n     */multiOpen:true};// Window exports\nFoundation.plugin(AccordionMenu,'AccordionMenu');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Drilldown module.\n   * @module foundation.drilldown\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.nest\n   */var Drilldown=function(){/**\n     * Creates a new instance of a drilldown menu.\n     * @class\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Drilldown(element,options){_classCallCheck(this,Drilldown);this.$element=element;this.options=$.extend({},Drilldown.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'drilldown');this._init();Foundation.registerPlugin(this,'Drilldown');Foundation.Keyboard.register('Drilldown',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close','TAB':'down','SHIFT_TAB':'up'});}/**\n     * Initializes the drilldown by creating jQuery collections of elements\n     * @private\n     */_createClass(Drilldown,[{key:'_init',value:function _init(){this.$submenuAnchors=this.$element.find('li.is-drilldown-submenu-parent').children('a');this.$submenus=this.$submenuAnchors.parent('li').children('[data-submenu]');this.$menuItems=this.$element.find('li').not('.js-drilldown-back').attr('role','menuitem').find('a');this._prepareMenu();this._keyboardEvents();}/**\n       * prepares drilldown menu by setting attributes to links and elements\n       * sets a min height to prevent content jumping\n       * wraps the element if not already wrapped\n       * @private\n       * @function\n       */},{key:'_prepareMenu',value:function _prepareMenu(){var _this=this;// if(!this.options.holdOpen){\n//   this._menuLinkEvents();\n// }\nthis.$submenuAnchors.each(function(){var $link=$(this);var $sub=$link.parent();if(_this.options.parentLink){$link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class=\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\" role=\"menu-item\"></li>');}$link.data('savedHref',$link.attr('href')).removeAttr('href');$link.children('[data-submenu]').attr({'aria-hidden':true,'tabindex':0,'role':'menu'});_this._events($link);});this.$submenus.each(function(){var $menu=$(this),$back=$menu.find('.js-drilldown-back');if(!$back.length){$menu.prepend(_this.options.backButton);}_this._back($menu);});if(!this.$element.parent().hasClass('is-drilldown')){this.$wrapper=$(this.options.wrapper).addClass('is-drilldown');this.$wrapper=this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());}}/**\n       * Adds event handlers to elements in the menu.\n       * @function\n       * @private\n       * @param {jQuery} $elem - the current menu item to add handlers to.\n       */},{key:'_events',value:function _events($elem){var _this=this;$elem.off('click.zf.drilldown').on('click.zf.drilldown',function(e){if($(e.target).parentsUntil('ul','li').hasClass('is-drilldown-submenu-parent')){e.stopImmediatePropagation();e.preventDefault();}// if(e.target !== e.currentTarget.firstElementChild){\n//   return false;\n// }\n_this._show($elem.parent('li'));if(_this.options.closeOnClick){var $body=$('body');$body.off('.zf.drilldown').on('click.zf.drilldown',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}e.preventDefault();_this._hideAll();$body.off('.zf.drilldown');});}});}/**\n       * Adds keydown event listener to `li`'s in the menu.\n       * @private\n       */},{key:'_keyboardEvents',value:function _keyboardEvents(){var _this=this;this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown',function(e){var $element=$(this),$elements=$element.parent('li').parent('ul').children('li').children('a'),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));return;}});Foundation.Keyboard.handleKey(e,'Drilldown',{next:function next(){if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(Foundation.transitionend($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});return true;}},previous:function previous(){_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(Foundation.transitionend($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});return true;},up:function up(){$prevElement.focus();return true;},down:function down(){$nextElement.focus();return true;},close:function close(){_this._back();//_this.$menuItems.first().focus(); // focus to first element\n},open:function open(){if(!$element.is(_this.$menuItems)){// not menu item means back button\n_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(Foundation.transitionend($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});}else if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(Foundation.transitionend($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});}return true;},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});// end keyboardAccess\n}/**\n       * Closes all open elements, and returns to root menu.\n       * @function\n       * @fires Drilldown#closed\n       */},{key:'_hideAll',value:function _hideAll(){var $elem=this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');$elem.one(Foundation.transitionend($elem),function(e){$elem.removeClass('is-active is-closing');});/**\n         * Fires when the menu is fully closed.\n         * @event Drilldown#closed\n         */this.$element.trigger('closed.zf.drilldown');}/**\n       * Adds event listener for each `back` button, and closes open menus.\n       * @function\n       * @fires Drilldown#back\n       * @param {jQuery} $elem - the current sub-menu to add `back` event.\n       */},{key:'_back',value:function _back($elem){var _this=this;$elem.off('click.zf.drilldown');$elem.children('.js-drilldown-back').on('click.zf.drilldown',function(e){e.stopImmediatePropagation();// console.log('mouseup on back');\n_this._hide($elem);});}/**\n       * Adds event listener to menu items w/o submenus to close open menus on click.\n       * @function\n       * @private\n       */},{key:'_menuLinkEvents',value:function _menuLinkEvents(){var _this=this;this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown',function(e){// e.stopImmediatePropagation();\nsetTimeout(function(){_this._hideAll();},0);});}/**\n       * Opens a submenu.\n       * @function\n       * @fires Drilldown#open\n       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\n       */},{key:'_show',value:function _show($elem){$elem.children('[data-submenu]').addClass('is-active');/**\n         * Fires when the submenu has opened.\n         * @event Drilldown#open\n         */this.$element.trigger('open.zf.drilldown',[$elem]);}},{key:'_hide',/**\n       * Hides a submenu\n       * @function\n       * @fires Drilldown#hide\n       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\n       */value:function _hide($elem){var _this=this;$elem.addClass('is-closing').one(Foundation.transitionend($elem),function(){$elem.removeClass('is-active is-closing');$elem.blur();});/**\n         * Fires when the submenu has closed.\n         * @event Drilldown#hide\n         */$elem.trigger('hide.zf.drilldown',[$elem]);}/**\n       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\n       * Prevents content jumping.\n       * @function\n       * @private\n       */},{key:'_getMaxDims',value:function _getMaxDims(){var max=0,result={};this.$submenus.add(this.$element).each(function(){var numOfElems=$(this).children('li').length;max=numOfElems>max?numOfElems:max;});result['min-height']=max*this.$menuItems[0].getBoundingClientRect().height+'px';result['max-width']=this.$element[0].getBoundingClientRect().width+'px';return result;}/**\n       * Destroys the Drilldown Menu\n       * @function\n       */},{key:'destroy',value:function destroy(){this._hideAll();Foundation.Nest.Burn(this.$element,'drilldown');this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');this.$submenuAnchors.each(function(){$(this).off('.zf.drilldown');});this.$element.find('a').each(function(){var $link=$(this);if($link.data('savedHref')){$link.attr('href',$link.data('savedHref')).removeData('savedHref');}else{return;}});Foundation.unregisterPlugin(this);}}]);return Drilldown;}();Drilldown.defaults={/**\n     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\`) if copy and pasting.\n     * @option\n     * @example '<\\li><\\a>Back<\\/a><\\/li>'\n     */backButton:'<li class=\"js-drilldown-back\"><a tabindex=\"0\">Back</a></li>',/**\n     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\`) if copy and pasting.\n     * @option\n     * @example '<\\div class=\"is-drilldown\"><\\/div>'\n     */wrapper:'<div></div>',/**\n     * Adds the parent link to the submenu.\n     * @option\n     * @example false\n     */parentLink:false,/**\n     * Allow the menu to return to root list on body click.\n     * @option\n     * @example false\n     */closeOnClick:false// holdOpen: false\n};// Window exports\nFoundation.plugin(Drilldown,'Drilldown');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Dropdown module.\n   * @module foundation.dropdown\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   */var Dropdown=function(){/**\n     * Creates a new instance of a dropdown.\n     * @class\n     * @param {jQuery} element - jQuery object to make into a dropdown.\n     *        Object should be of the dropdown panel, rather than its anchor.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Dropdown(element,options){_classCallCheck(this,Dropdown);this.$element=element;this.options=$.extend({},Dropdown.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Dropdown');Foundation.Keyboard.register('Dropdown',{'ENTER':'open','SPACE':'open','ESCAPE':'close','TAB':'tab_forward','SHIFT_TAB':'tab_backward'});}/**\n     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\n     * @function\n     * @private\n     */_createClass(Dropdown,[{key:'_init',value:function _init(){var $id=this.$element.attr('id');this.$anchor=$('[data-toggle=\"'+$id+'\"]')||$('[data-open=\"'+$id+'\"]');this.$anchor.attr({'aria-controls':$id,'data-is-focus':false,'data-yeti-box':$id,'aria-haspopup':true,'aria-expanded':false});this.options.positionClass=this.getPositionClass();this.counter=4;this.usedPositions=[];this.$element.attr({'aria-hidden':'true','data-yeti-box':$id,'data-resize':$id,'aria-labelledby':this.$anchor[0].id||Foundation.GetYoDigits(6,'dd-anchor')});this._events();}/**\n       * Helper function to determine current orientation of dropdown pane.\n       * @function\n       * @returns {String} position - string value of a position class.\n       */},{key:'getPositionClass',value:function getPositionClass(){var verticalPosition=this.$element[0].className.match(/(top|left|right|bottom)/g);verticalPosition=verticalPosition?verticalPosition[0]:'';var horizontalPosition=/float-(\\S+)\\s/.exec(this.$anchor[0].className);horizontalPosition=horizontalPosition?horizontalPosition[1]:'';var position=horizontalPosition?horizontalPosition+' '+verticalPosition:verticalPosition;return position;}/**\n       * Adjusts the dropdown panes orientation by adding/removing positioning classes.\n       * @function\n       * @private\n       * @param {String} position - position class to remove.\n       */},{key:'_reposition',value:function _reposition(position){this.usedPositions.push(position?position:'bottom');//default, try switching to opposite side\nif(!position&&this.usedPositions.indexOf('top')<0){this.$element.addClass('top');}else if(position==='top'&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}else if(position==='left'&&this.usedPositions.indexOf('right')<0){this.$element.removeClass(position).addClass('right');}else if(position==='right'&&this.usedPositions.indexOf('left')<0){this.$element.removeClass(position).addClass('left');}//if default change didn't work, try bottom or left first\nelse if(!position&&this.usedPositions.indexOf('top')>-1&&this.usedPositions.indexOf('left')<0){this.$element.addClass('left');}else if(position==='top'&&this.usedPositions.indexOf('bottom')>-1&&this.usedPositions.indexOf('left')<0){this.$element.removeClass(position).addClass('left');}else if(position==='left'&&this.usedPositions.indexOf('right')>-1&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}else if(position==='right'&&this.usedPositions.indexOf('left')>-1&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}//if nothing cleared, set to bottom\nelse{this.$element.removeClass(position);}this.classChanged=true;this.counter--;}/**\n       * Sets the position and orientation of the dropdown pane, checks for collisions.\n       * Recursively calls itself if a collision is detected, with a new position class.\n       * @function\n       * @private\n       */},{key:'_setPosition',value:function _setPosition(){if(this.$anchor.attr('aria-expanded')==='false'){return false;}var position=this.getPositionClass(),$eleDims=Foundation.Box.GetDimensions(this.$element),$anchorDims=Foundation.Box.GetDimensions(this.$anchor),_this=this,direction=position==='left'?'left':position==='right'?'left':'top',param=direction==='top'?'height':'width',offset=param==='height'?this.options.vOffset:this.options.hOffset;if($eleDims.width>=$eleDims.windowDims.width||!this.counter&&!Foundation.Box.ImNotTouchingYou(this.$element)){this.$element.offset(Foundation.Box.GetOffsets(this.$element,this.$anchor,'center bottom',this.options.vOffset,this.options.hOffset,true)).css({'width':$eleDims.windowDims.width-this.options.hOffset*2,'height':'auto'});this.classChanged=true;return false;}this.$element.offset(Foundation.Box.GetOffsets(this.$element,this.$anchor,position,this.options.vOffset,this.options.hOffset));while(!Foundation.Box.ImNotTouchingYou(this.$element,false,true)&&this.counter){this._reposition(position);this._setPosition();}}/**\n       * Adds event listeners to the element utilizing the triggers utility library.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':this._setPosition.bind(this)});if(this.options.hover){this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.open();_this.$anchor.data('hover',true);},_this.options.hoverDelay);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchor.data('hover',false);},_this.options.hoverDelay);});if(this.options.hoverPane){this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchor.data('hover',false);},_this.options.hoverDelay);});}}this.$anchor.add(this.$element).on('keydown.zf.dropdown',function(e){var $target=$(this),visibleFocusableElements=Foundation.Keyboard.findFocusable(_this.$element);Foundation.Keyboard.handleKey(e,'Dropdown',{tab_forward:function tab_forward(){if(_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))){// left modal downwards, setting focus to first element\nif(_this.options.trapFocus){// if focus shall be trapped\nvisibleFocusableElements.eq(0).focus();e.preventDefault();}else{// if focus is not trapped, close dropdown on focus out\n_this.close();}}},tab_backward:function tab_backward(){if(_this.$element.find(':focus').is(visibleFocusableElements.eq(0))||_this.$element.is(':focus')){// left modal upwards, setting focus to last element\nif(_this.options.trapFocus){// if focus shall be trapped\nvisibleFocusableElements.eq(-1).focus();e.preventDefault();}else{// if focus is not trapped, close dropdown on focus out\n_this.close();}}},open:function open(){if($target.is(_this.$anchor)){_this.open();_this.$element.attr('tabindex',-1).focus();e.preventDefault();}},close:function close(){_this.close();_this.$anchor.focus();}});});}/**\n       * Adds an event handler to the body to close any dropdowns on a click.\n       * @function\n       * @private\n       */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=$(document.body).not(this.$element),_this=this;$body.off('click.zf.dropdown').on('click.zf.dropdown',function(e){if(_this.$anchor.is(e.target)||_this.$anchor.find(e.target).length){return;}if(_this.$element.find(e.target).length){return;}_this.close();$body.off('click.zf.dropdown');});}/**\n       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\n       * @function\n       * @fires Dropdown#closeme\n       * @fires Dropdown#show\n       */},{key:'open',value:function open(){// var _this = this;\n/**\n         * Fires to close other open dropdowns\n         * @event Dropdown#closeme\n         */this.$element.trigger('closeme.zf.dropdown',this.$element.attr('id'));this.$anchor.addClass('hover').attr({'aria-expanded':true});// this.$element/*.show()*/;\nthis._setPosition();this.$element.addClass('is-open').attr({'aria-hidden':false});if(this.options.autoFocus){var $focusable=Foundation.Keyboard.findFocusable(this.$element);if($focusable.length){$focusable.eq(0).focus();}}if(this.options.closeOnClick){this._addBodyHandler();}/**\n         * Fires once the dropdown is visible.\n         * @event Dropdown#show\n         */this.$element.trigger('show.zf.dropdown',[this.$element]);}/**\n       * Closes the open dropdown pane.\n       * @function\n       * @fires Dropdown#hide\n       */},{key:'close',value:function close(){if(!this.$element.hasClass('is-open')){return false;}this.$element.removeClass('is-open').attr({'aria-hidden':true});this.$anchor.removeClass('hover').attr('aria-expanded',false);if(this.classChanged){var curPositionClass=this.getPositionClass();if(curPositionClass){this.$element.removeClass(curPositionClass);}this.$element.addClass(this.options.positionClass)/*.hide()*/.css({height:'',width:''});this.classChanged=false;this.counter=4;this.usedPositions.length=0;}this.$element.trigger('hide.zf.dropdown',[this.$element]);}/**\n       * Toggles the dropdown pane's visibility.\n       * @function\n       */},{key:'toggle',value:function toggle(){if(this.$element.hasClass('is-open')){if(this.$anchor.data('hover'))return;this.close();}else{this.open();}}/**\n       * Destroys the dropdown.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.off('.zf.trigger').hide();this.$anchor.off('.zf.dropdown');Foundation.unregisterPlugin(this);}}]);return Dropdown;}();Dropdown.defaults={/**\n     * Amount of time to delay opening a submenu on hover event.\n     * @option\n     * @example 250\n     */hoverDelay:250,/**\n     * Allow submenus to open on hover events\n     * @option\n     * @example false\n     */hover:false,/**\n     * Don't close dropdown when hovering over dropdown pane\n     * @option\n     * @example true\n     */hoverPane:false,/**\n     * Number of pixels between the dropdown pane and the triggering element on open.\n     * @option\n     * @example 1\n     */vOffset:1,/**\n     * Number of pixels between the dropdown pane and the triggering element on open.\n     * @option\n     * @example 1\n     */hOffset:1,/**\n     * Class applied to adjust open position. JS will test and fill this in.\n     * @option\n     * @example 'top'\n     */positionClass:'',/**\n     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\n     * @option\n     * @example false\n     */trapFocus:false,/**\n     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\n     * @option\n     * @example true\n     */autoFocus:false,/**\n     * Allows a click on the body to close the dropdown.\n     * @option\n     * @example false\n     */closeOnClick:false};// Window exports\nFoundation.plugin(Dropdown,'Dropdown');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * DropdownMenu module.\n   * @module foundation.dropdown-menu\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.nest\n   */var DropdownMenu=function(){/**\n     * Creates a new instance of DropdownMenu.\n     * @class\n     * @fires DropdownMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function DropdownMenu(element,options){_classCallCheck(this,DropdownMenu);this.$element=element;this.options=$.extend({},DropdownMenu.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'dropdown');this._init();Foundation.registerPlugin(this,'DropdownMenu');Foundation.Keyboard.register('DropdownMenu',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close'});}/**\n     * Initializes the plugin, and calls _prepareMenu\n     * @private\n     * @function\n     */_createClass(DropdownMenu,[{key:'_init',value:function _init(){var subs=this.$element.find('li.is-dropdown-submenu-parent');this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');this.$menuItems=this.$element.find('[role=\"menuitem\"]');this.$tabs=this.$element.children('[role=\"menuitem\"]');this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);if(this.$element.hasClass(this.options.rightClass)||this.options.alignment==='right'||Foundation.rtl()||this.$element.parents('.top-bar-right').is('*')){this.options.alignment='right';subs.addClass('opens-left');}else{subs.addClass('opens-right');}this.changed=false;this._events();}},{key:'_events',/**\n       * Adds event listeners to elements within the menu\n       * @private\n       * @function\n       */value:function _events(){var _this=this,hasTouch='ontouchstart'in window||typeof window.ontouchstart!=='undefined',parClass='is-dropdown-submenu-parent';// used for onClick and in the keyboard handlers\nvar handleClickFn=function handleClickFn(e){var $elem=$(e.target).parentsUntil('ul','.'+parClass),hasSub=$elem.hasClass(parClass),hasClicked=$elem.attr('data-is-click')==='true',$sub=$elem.children('.is-dropdown-submenu');if(hasSub){if(hasClicked){if(!_this.options.closeOnClick||!_this.options.clickOpen&&!hasTouch||_this.options.forceFollow&&hasTouch){return;}else{e.stopImmediatePropagation();e.preventDefault();_this._hide($elem);}}else{e.preventDefault();e.stopImmediatePropagation();_this._show($elem.children('.is-dropdown-submenu'));$elem.add($elem.parentsUntil(_this.$element,'.'+parClass)).attr('data-is-click',true);}}else{return;}};if(this.options.clickOpen||hasTouch){this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu',handleClickFn);}if(!this.options.disableHover){this.$menuItems.on('mouseenter.zf.dropdownmenu',function(e){var $elem=$(this),hasSub=$elem.hasClass(parClass);if(hasSub){clearTimeout(_this.delay);_this.delay=setTimeout(function(){_this._show($elem.children('.is-dropdown-submenu'));},_this.options.hoverDelay);}}).on('mouseleave.zf.dropdownmenu',function(e){var $elem=$(this),hasSub=$elem.hasClass(parClass);if(hasSub&&_this.options.autoclose){if($elem.attr('data-is-click')==='true'&&_this.options.clickOpen){return false;}clearTimeout(_this.delay);_this.delay=setTimeout(function(){_this._hide($elem);},_this.options.closingTime);}});}this.$menuItems.on('keydown.zf.dropdownmenu',function(e){var $element=$(e.target).parentsUntil('ul','[role=\"menuitem\"]'),isTab=_this.$tabs.index($element)>-1,$elements=isTab?_this.$tabs:$element.siblings('li').add($element),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(i-1);$nextElement=$elements.eq(i+1);return;}});var nextSibling=function nextSibling(){if(!$element.is(':last-child')){$nextElement.children('a:first').focus();e.preventDefault();}},prevSibling=function prevSibling(){$prevElement.children('a:first').focus();e.preventDefault();},openSub=function openSub(){var $sub=$element.children('ul.is-dropdown-submenu');if($sub.length){_this._show($sub);$element.find('li > a:first').focus();e.preventDefault();}else{return;}},closeSub=function closeSub(){//if ($element.is(':first-child')) {\nvar close=$element.parent('ul').parent('li');close.children('a:first').focus();_this._hide(close);e.preventDefault();//}\n};var functions={open:openSub,close:function close(){_this._hide(_this.$element);_this.$menuItems.find('a:first').focus();// focus to first element\ne.preventDefault();},handled:function handled(){e.stopImmediatePropagation();}};if(isTab){if(_this.$element.hasClass(_this.options.verticalClass)){// vertical menu\nif(_this.options.alignment==='left'){// left aligned\n$.extend(functions,{down:nextSibling,up:prevSibling,next:openSub,previous:closeSub});}else{// right aligned\n$.extend(functions,{down:nextSibling,up:prevSibling,next:closeSub,previous:openSub});}}else{// horizontal menu\n$.extend(functions,{next:nextSibling,previous:prevSibling,down:openSub,up:closeSub});}}else{// not tabs -> one sub\nif(_this.options.alignment==='left'){// left aligned\n$.extend(functions,{next:openSub,previous:closeSub,down:nextSibling,up:prevSibling});}else{// right aligned\n$.extend(functions,{next:closeSub,previous:openSub,down:nextSibling,up:prevSibling});}}Foundation.Keyboard.handleKey(e,'DropdownMenu',functions);});}/**\n       * Adds an event handler to the body to close any dropdowns on a click.\n       * @function\n       * @private\n       */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=$(document.body),_this=this;$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu',function(e){var $link=_this.$element.find(e.target);if($link.length){return;}_this._hide();$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');});}/**\n       * Opens a dropdown pane, and checks for collisions first.\n       * @param {jQuery} $sub - ul element that is a submenu to show\n       * @function\n       * @private\n       * @fires DropdownMenu#show\n       */},{key:'_show',value:function _show($sub){var idx=this.$tabs.index(this.$tabs.filter(function(i,el){return $(el).find($sub).length>0;}));var $sibs=$sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');this._hide($sibs,idx);$sub.css('visibility','hidden').addClass('js-dropdown-active').attr({'aria-hidden':false}).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({'aria-expanded':true});var clear=Foundation.Box.ImNotTouchingYou($sub,null,true);if(!clear){var oldClass=this.options.alignment==='left'?'-right':'-left',$parentLi=$sub.parent('.is-dropdown-submenu-parent');$parentLi.removeClass('opens'+oldClass).addClass('opens-'+this.options.alignment);clear=Foundation.Box.ImNotTouchingYou($sub,null,true);if(!clear){$parentLi.removeClass('opens-'+this.options.alignment).addClass('opens-inner');}this.changed=true;}$sub.css('visibility','');if(this.options.closeOnClick){this._addBodyHandler();}/**\n         * Fires when the new dropdown pane is visible.\n         * @event DropdownMenu#show\n         */this.$element.trigger('show.zf.dropdownmenu',[$sub]);}/**\n       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\n       * @function\n       * @param {jQuery} $elem - element with a submenu to hide\n       * @param {Number} idx - index of the $tabs collection to hide\n       * @private\n       */},{key:'_hide',value:function _hide($elem,idx){var $toClose;if($elem&&$elem.length){$toClose=$elem;}else if(idx!==undefined){$toClose=this.$tabs.not(function(i,el){return i===idx;});}else{$toClose=this.$element;}var somethingToClose=$toClose.hasClass('is-active')||$toClose.find('.is-active').length>0;if(somethingToClose){$toClose.find('li.is-active').add($toClose).attr({'aria-expanded':false,'data-is-click':false}).removeClass('is-active');$toClose.find('ul.js-dropdown-active').attr({'aria-hidden':true}).removeClass('js-dropdown-active');if(this.changed||$toClose.find('opens-inner').length){var oldClass=this.options.alignment==='left'?'right':'left';$toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-'+this.options.alignment).addClass('opens-'+oldClass);this.changed=false;}/**\n           * Fires when the open menus are closed.\n           * @event DropdownMenu#hide\n           */this.$element.trigger('hide.zf.dropdownmenu',[$toClose]);}}/**\n       * Destroys the plugin.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');$(document.body).off('.zf.dropdownmenu');Foundation.Nest.Burn(this.$element,'dropdown');Foundation.unregisterPlugin(this);}}]);return DropdownMenu;}();/**\n   * Default settings for plugin\n   */DropdownMenu.defaults={/**\n     * Disallows hover events from opening submenus\n     * @option\n     * @example false\n     */disableHover:false,/**\n     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\n     * @option\n     * @example true\n     */autoclose:true,/**\n     * Amount of time to delay opening a submenu on hover event.\n     * @option\n     * @example 50\n     */hoverDelay:50,/**\n     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\n     * @option\n     * @example true\n     */clickOpen:false,/**\n     * Amount of time to delay closing a submenu on a mouseleave event.\n     * @option\n     * @example 500\n     */closingTime:500,/**\n     * Position of the menu relative to what direction the submenus should open. Handled by JS.\n     * @option\n     * @example 'left'\n     */alignment:'left',/**\n     * Allow clicks on the body to close any open submenus.\n     * @option\n     * @example true\n     */closeOnClick:true,/**\n     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\n     * @option\n     * @example 'vertical'\n     */verticalClass:'vertical',/**\n     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\n     * @option\n     * @example 'align-right'\n     */rightClass:'align-right',/**\n     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\n     * @option\n     * @example false\n     */forceFollow:true};// Window exports\nFoundation.plugin(DropdownMenu,'DropdownMenu');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Equalizer module.\n   * @module foundation.equalizer\n   */var Equalizer=function(){/**\n     * Creates a new instance of Equalizer.\n     * @class\n     * @fires Equalizer#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Equalizer(element,options){_classCallCheck(this,Equalizer);this.$element=element;this.options=$.extend({},Equalizer.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Equalizer');}/**\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */_createClass(Equalizer,[{key:'_init',value:function _init(){var eqId=this.$element.attr('data-equalizer')||'';var $watched=this.$element.find('[data-equalizer-watch=\"'+eqId+'\"]');this.$watched=$watched.length?$watched:this.$element.find('[data-equalizer-watch]');this.$element.attr('data-resize',eqId||Foundation.GetYoDigits(6,'eq'));this.hasNested=this.$element.find('[data-equalizer]').length>0;this.isNested=this.$element.parentsUntil(document.body,'[data-equalizer]').length>0;this.isOn=false;this._bindHandler={onResizeMeBound:this._onResizeMe.bind(this),onPostEqualizedBound:this._onPostEqualized.bind(this)};var imgs=this.$element.find('img');var tooSmall;if(this.options.equalizeOn){tooSmall=this._checkMQ();$(window).on('changed.zf.mediaquery',this._checkMQ.bind(this));}else{this._events();}if(tooSmall!==undefined&&tooSmall===false||tooSmall===undefined){if(imgs.length){Foundation.onImagesLoaded(imgs,this._reflow.bind(this));}else{this._reflow();}}}/**\n       * Removes event listeners if the breakpoint is too small.\n       * @private\n       */},{key:'_pauseEvents',value:function _pauseEvents(){this.isOn=false;this.$element.off({'.zf.equalizer':this._bindHandler.onPostEqualizedBound,'resizeme.zf.trigger':this._bindHandler.onResizeMeBound});}/**\n       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n       * @private\n       */},{key:'_onResizeMe',value:function _onResizeMe(e){this._reflow();}/**\n       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n       * @private\n       */},{key:'_onPostEqualized',value:function _onPostEqualized(e){if(e.target!==this.$element[0]){this._reflow();}}/**\n       * Initializes events for Equalizer.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this._pauseEvents();if(this.hasNested){this.$element.on('postequalized.zf.equalizer',this._bindHandler.onPostEqualizedBound);}else{this.$element.on('resizeme.zf.trigger',this._bindHandler.onResizeMeBound);}this.isOn=true;}/**\n       * Checks the current breakpoint to the minimum required size.\n       * @private\n       */},{key:'_checkMQ',value:function _checkMQ(){var tooSmall=!Foundation.MediaQuery.atLeast(this.options.equalizeOn);if(tooSmall){if(this.isOn){this._pauseEvents();this.$watched.css('height','auto');}}else{if(!this.isOn){this._events();}}return tooSmall;}/**\n       * A noop version for the plugin\n       * @private\n       */},{key:'_killswitch',value:function _killswitch(){return;}/**\n       * Calls necessary functions to update Equalizer upon DOM change\n       * @private\n       */},{key:'_reflow',value:function _reflow(){if(!this.options.equalizeOnStack){if(this._isStacked()){this.$watched.css('height','auto');return false;}}if(this.options.equalizeByRow){this.getHeightsByRow(this.applyHeightByRow.bind(this));}else{this.getHeights(this.applyHeight.bind(this));}}/**\n       * Manually determines if the first 2 elements are *NOT* stacked.\n       * @private\n       */},{key:'_isStacked',value:function _isStacked(){return this.$watched[0].getBoundingClientRect().top!==this.$watched[1].getBoundingClientRect().top;}/**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} heights - An array of heights of children within Equalizer container\n       */},{key:'getHeights',value:function getHeights(cb){var heights=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';heights.push(this.$watched[i].offsetHeight);}cb(heights);}/**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       */},{key:'getHeightsByRow',value:function getHeightsByRow(cb){var lastElTopOffset=this.$watched.length?this.$watched.first().offset().top:0,groups=[],group=0;//group by Row\ngroups[group]=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';//maybe could use this.$watched[i].offsetTop\nvar elOffsetTop=$(this.$watched[i]).offset().top;if(elOffsetTop!=lastElTopOffset){group++;groups[group]=[];lastElTopOffset=elOffsetTop;}groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);}for(var j=0,ln=groups.length;j<ln;j++){var heights=$(groups[j]).map(function(){return this[1];}).get();var max=Math.max.apply(null,heights);groups[j].push(max);}cb(groups);}/**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n       * @param {array} heights - An array of heights of children within Equalizer container\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#postequalized\n       */},{key:'applyHeight',value:function applyHeight(heights){var max=Math.max.apply(null,heights);/**\n         * Fires before the heights are applied\n         * @event Equalizer#preequalized\n         */this.$element.trigger('preequalized.zf.equalizer');this.$watched.css('height',max);/**\n         * Fires when the heights have been applied\n         * @event Equalizer#postequalized\n         */this.$element.trigger('postequalized.zf.equalizer');}/**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#preequalizedRow\n       * @fires Equalizer#postequalizedRow\n       * @fires Equalizer#postequalized\n       */},{key:'applyHeightByRow',value:function applyHeightByRow(groups){/**\n         * Fires before the heights are applied\n         */this.$element.trigger('preequalized.zf.equalizer');for(var i=0,len=groups.length;i<len;i++){var groupsILength=groups[i].length,max=groups[i][groupsILength-1];if(groupsILength<=2){$(groups[i][0][0]).css({'height':'auto'});continue;}/**\n            * Fires before the heights per row are applied\n            * @event Equalizer#preequalizedRow\n            */this.$element.trigger('preequalizedrow.zf.equalizer');for(var j=0,lenJ=groupsILength-1;j<lenJ;j++){$(groups[i][j][0]).css({'height':max});}/**\n            * Fires when the heights per row have been applied\n            * @event Equalizer#postequalizedRow\n            */this.$element.trigger('postequalizedrow.zf.equalizer');}/**\n         * Fires when the heights have been applied\n         */this.$element.trigger('postequalized.zf.equalizer');}/**\n       * Destroys an instance of Equalizer.\n       * @function\n       */},{key:'destroy',value:function destroy(){this._pauseEvents();this.$watched.css('height','auto');Foundation.unregisterPlugin(this);}}]);return Equalizer;}();/**\n   * Default settings for plugin\n   */Equalizer.defaults={/**\n     * Enable height equalization when stacked on smaller screens.\n     * @option\n     * @example true\n     */equalizeOnStack:true,/**\n     * Enable height equalization row by row.\n     * @option\n     * @example false\n     */equalizeByRow:false,/**\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\n     * @option\n     * @example 'medium'\n     */equalizeOn:''};// Window exports\nFoundation.plugin(Equalizer,'Equalizer');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Interchange module.\n   * @module foundation.interchange\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.timerAndImageLoader\n   */var Interchange=function(){/**\n     * Creates a new instance of Interchange.\n     * @class\n     * @fires Interchange#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Interchange(element,options){_classCallCheck(this,Interchange);this.$element=element;this.options=$.extend({},Interchange.defaults,options);this.rules=[];this.currentPath='';this._init();this._events();Foundation.registerPlugin(this,'Interchange');}/**\n     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n     * @function\n     * @private\n     */_createClass(Interchange,[{key:'_init',value:function _init(){this._addBreakpoints();this._generateRules();this._reflow();}/**\n       * Initializes events for Interchange.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){$(window).on('resize.zf.interchange',Foundation.util.throttle(this._reflow.bind(this),50));}/**\n       * Calls necessary functions to update Interchange upon DOM change\n       * @function\n       * @private\n       */},{key:'_reflow',value:function _reflow(){var match;// Iterate through each rule, but only save the last match\nfor(var i in this.rules){if(this.rules.hasOwnProperty(i)){var rule=this.rules[i];if(window.matchMedia(rule.query).matches){match=rule;}}}if(match){this.replace(match.path);}}/**\n       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n       * @function\n       * @private\n       */},{key:'_addBreakpoints',value:function _addBreakpoints(){for(var i in Foundation.MediaQuery.queries){if(Foundation.MediaQuery.queries.hasOwnProperty(i)){var query=Foundation.MediaQuery.queries[i];Interchange.SPECIAL_QUERIES[query.name]=query.value;}}}/**\n       * Checks the Interchange element for the provided media query + content pairings\n       * @function\n       * @private\n       * @param {Object} element - jQuery object that is an Interchange instance\n       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n       */},{key:'_generateRules',value:function _generateRules(element){var rulesList=[];var rules;if(this.options.rules){rules=this.options.rules;}else{rules=this.$element.data('interchange').match(/\\[.*?\\]/g);}for(var i in rules){if(rules.hasOwnProperty(i)){var rule=rules[i].slice(1,-1).split(', ');var path=rule.slice(0,-1).join('');var query=rule[rule.length-1];if(Interchange.SPECIAL_QUERIES[query]){query=Interchange.SPECIAL_QUERIES[query];}rulesList.push({path:path,query:query});}}this.rules=rulesList;}/**\n       * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n       * @function\n       * @param {String} path - Path to the image or HTML partial.\n       * @fires Interchange#replaced\n       */},{key:'replace',value:function replace(path){if(this.currentPath===path)return;var _this=this,trigger='replaced.zf.interchange';// Replacing images\nif(this.$element[0].nodeName==='IMG'){this.$element.attr('src',path).load(function(){_this.currentPath=path;}).trigger(trigger);}// Replacing background images\nelse if(path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)){this.$element.css({'background-image':'url('+path+')'}).trigger(trigger);}// Replacing HTML\nelse{$.get(path,function(response){_this.$element.html(response).trigger(trigger);$(response).foundation();_this.currentPath=path;});}/**\n         * Fires when content in an Interchange element is done being loaded.\n         * @event Interchange#replaced\n         */// this.$element.trigger('replaced.zf.interchange');\n}/**\n       * Destroys an instance of interchange.\n       * @function\n       */},{key:'destroy',value:function destroy(){//TODO this.\n}}]);return Interchange;}();/**\n   * Default settings for plugin\n   */Interchange.defaults={/**\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n     * @option\n     */rules:null};Interchange.SPECIAL_QUERIES={'landscape':'screen and (orientation: landscape)','portrait':'screen and (orientation: portrait)','retina':'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'};// Window exports\nFoundation.plugin(Interchange,'Interchange');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Magellan module.\n   * @module foundation.magellan\n   */var Magellan=function(){/**\n     * Creates a new instance of Magellan.\n     * @class\n     * @fires Magellan#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Magellan(element,options){_classCallCheck(this,Magellan);this.$element=element;this.options=$.extend({},Magellan.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Magellan');}/**\n     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */_createClass(Magellan,[{key:'_init',value:function _init(){var id=this.$element[0].id||Foundation.GetYoDigits(6,'magellan');var _this=this;this.$targets=$('[data-magellan-target]');this.$links=this.$element.find('a');this.$element.attr({'data-resize':id,'data-scroll':id,'id':id});this.$active=$();this.scrollPos=parseInt(window.pageYOffset,10);this._events();}/**\n       * Calculates an array of pixel values that are the demarcation lines between locations on the page.\n       * Can be invoked if new elements are added or the size of a location changes.\n       * @function\n       */},{key:'calcPoints',value:function calcPoints(){var _this=this,body=document.body,html=document.documentElement;this.points=[];this.winHeight=Math.round(Math.max(window.innerHeight,html.clientHeight));this.docHeight=Math.round(Math.max(body.scrollHeight,body.offsetHeight,html.clientHeight,html.scrollHeight,html.offsetHeight));this.$targets.each(function(){var $tar=$(this),pt=Math.round($tar.offset().top-_this.options.threshold);$tar.targetPoint=pt;_this.points.push(pt);});}/**\n       * Initializes events for Magellan.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this,$body=$('html, body'),opts={duration:_this.options.animationDuration,easing:_this.options.animationEasing};$(window).one('load',function(){if(_this.options.deepLinking){if(location.hash){_this.scrollToLoc(location.hash);}}_this.calcPoints();_this._updateActive();});this.$element.on({'resizeme.zf.trigger':this.reflow.bind(this),'scrollme.zf.trigger':this._updateActive.bind(this)}).on('click.zf.magellan','a[href^=\"#\"]',function(e){e.preventDefault();var arrival=this.getAttribute('href');_this.scrollToLoc(arrival);});}/**\n       * Function to scroll to a given location on the page.\n       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\n       * @function\n       */},{key:'scrollToLoc',value:function scrollToLoc(loc){var scrollPos=Math.round($(loc).offset().top-this.options.threshold/2-this.options.barOffset);$('html, body').stop(true).animate({scrollTop:scrollPos},this.options.animationDuration,this.options.animationEasing);}/**\n       * Calls necessary functions to update Magellan upon DOM change\n       * @function\n       */},{key:'reflow',value:function reflow(){this.calcPoints();this._updateActive();}/**\n       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\n       * @private\n       * @function\n       * @fires Magellan#update\n       */},{key:'_updateActive',value:function _updateActive()/*evt, elem, scrollPos*/{var winPos=/*scrollPos ||*/parseInt(window.pageYOffset,10),curIdx;if(winPos+this.winHeight===this.docHeight){curIdx=this.points.length-1;}else if(winPos<this.points[0]){curIdx=0;}else{var isDown=this.scrollPos<winPos,_this=this,curVisible=this.points.filter(function(p,i){return isDown?p-_this.options.barOffset<=winPos:p-_this.options.barOffset-_this.options.threshold<=winPos;});curIdx=curVisible.length?curVisible.length-1:0;}this.$active.removeClass(this.options.activeClass);this.$active=this.$links.eq(curIdx).addClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}this.scrollPos=winPos;/**\n         * Fires when magellan is finished updating to the new active element.\n         * @event Magellan#update\n         */this.$element.trigger('update.zf.magellan',[this.$active]);}/**\n       * Destroys an instance of Magellan and resets the url of the window.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.off('.zf.trigger .zf.magellan').find('.'+this.options.activeClass).removeClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');window.location.hash.replace(hash,'');}Foundation.unregisterPlugin(this);}}]);return Magellan;}();/**\n   * Default settings for plugin\n   */Magellan.defaults={/**\n     * Amount of time, in ms, the animated scrolling should take between locations.\n     * @option\n     * @example 500\n     */animationDuration:500,/**\n     * Animation style to use when scrolling between locations.\n     * @option\n     * @example 'ease-in-out'\n     */animationEasing:'linear',/**\n     * Number of pixels to use as a marker for location changes.\n     * @option\n     * @example 50\n     */threshold:50,/**\n     * Class applied to the active locations link on the magellan container.\n     * @option\n     * @example 'active'\n     */activeClass:'active',/**\n     * Allows the script to manipulate the url of the current page, and if supported, alter the history.\n     * @option\n     * @example true\n     */deepLinking:false,/**\n     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\n     * @option\n     * @example 25\n     */barOffset:0};// Window exports\nFoundation.plugin(Magellan,'Magellan');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * OffCanvas module.\n   * @module foundation.offcanvas\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.triggers\n   * @requires foundation.util.motion\n   */var OffCanvas=function(){/**\n     * Creates a new instance of an off-canvas wrapper.\n     * @class\n     * @fires OffCanvas#init\n     * @param {Object} element - jQuery object to initialize.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function OffCanvas(element,options){_classCallCheck(this,OffCanvas);this.$element=element;this.options=$.extend({},OffCanvas.defaults,this.$element.data(),options);this.$lastTrigger=$();this.$triggers=$();this._init();this._events();Foundation.registerPlugin(this,'OffCanvas');}/**\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n     * @function\n     * @private\n     */_createClass(OffCanvas,[{key:'_init',value:function _init(){var id=this.$element.attr('id');this.$element.attr('aria-hidden','true');// Find triggers that affect this element and add aria-expanded to them\nthis.$triggers=$(document).find('[data-open=\"'+id+'\"], [data-close=\"'+id+'\"], [data-toggle=\"'+id+'\"]').attr('aria-expanded','false').attr('aria-controls',id);// Add a close trigger over the body if necessary\nif(this.options.closeOnClick){if($('.js-off-canvas-exit').length){this.$exiter=$('.js-off-canvas-exit');}else{var exiter=document.createElement('div');exiter.setAttribute('class','js-off-canvas-exit');$('[data-off-canvas-content]').append(exiter);this.$exiter=$(exiter);}}this.options.isRevealed=this.options.isRevealed||new RegExp(this.options.revealClass,'g').test(this.$element[0].className);if(this.options.isRevealed){this.options.revealOn=this.options.revealOn||this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];this._setMQChecker();}if(!this.options.transitionTime){this.options.transitionTime=parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration)*1000;}}/**\n       * Adds event handlers to the off-canvas wrapper and the exit overlay.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){this.$element.off('.zf.trigger .zf.offcanvas').on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'keydown.zf.offcanvas':this._handleKeyboard.bind(this)});if(this.options.closeOnClick&&this.$exiter.length){this.$exiter.on({'click.zf.offcanvas':this.close.bind(this)});}}/**\n       * Applies event listener for elements that will reveal at certain breakpoints.\n       * @private\n       */},{key:'_setMQChecker',value:function _setMQChecker(){var _this=this;$(window).on('changed.zf.mediaquery',function(){if(Foundation.MediaQuery.atLeast(_this.options.revealOn)){_this.reveal(true);}else{_this.reveal(false);}}).one('load.zf.offcanvas',function(){if(Foundation.MediaQuery.atLeast(_this.options.revealOn)){_this.reveal(true);}});}/**\n       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n       * @param {Boolean} isRevealed - true if element should be revealed.\n       * @function\n       */},{key:'reveal',value:function reveal(isRevealed){var $closer=this.$element.find('[data-close]');if(isRevealed){this.close();this.isRevealed=true;// if (!this.options.forceTop) {\n//   var scrollPos = parseInt(window.pageYOffset);\n//   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n// }\n// if (this.options.isSticky) { this._stick(); }\nthis.$element.off('open.zf.trigger toggle.zf.trigger');if($closer.length){$closer.hide();}}else{this.isRevealed=false;// if (this.options.isSticky || !this.options.forceTop) {\n//   this.$element[0].style.transform = '';\n//   $(window).off('scroll.zf.offcanvas');\n// }\nthis.$element.on({'open.zf.trigger':this.open.bind(this),'toggle.zf.trigger':this.toggle.bind(this)});if($closer.length){$closer.show();}}}/**\n       * Opens the off-canvas menu.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       * @fires OffCanvas#opened\n       */},{key:'open',value:function open(event,trigger){if(this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this,$body=$(document.body);if(this.options.forceTop){$('body').scrollTop(0);}// window.pageYOffset = 0;\n// if (!this.options.forceTop) {\n//   var scrollPos = parseInt(window.pageYOffset);\n//   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n//   if (this.$exiter.length) {\n//     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n//   }\n// }\n/**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#opened\n         */Foundation.Move(this.options.transitionTime,this.$element,function(){$('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-'+_this.options.position);_this.$element.addClass('is-open');// if (_this.options.isSticky) {\n//   _this._stick();\n// }\n});this.$triggers.attr('aria-expanded','true');this.$element.attr('aria-hidden','false').trigger('opened.zf.offcanvas');if(this.options.closeOnClick){this.$exiter.addClass('is-visible');}if(trigger){this.$lastTrigger=trigger;}if(this.options.autoFocus){this.$element.one(Foundation.transitionend(this.$element),function(){_this.$element.find('a, button').eq(0).focus();});}if(this.options.trapFocus){$('[data-off-canvas-content]').attr('tabindex','-1');this._trapFocus();}}/**\n       * Traps focus within the offcanvas on open.\n       * @private\n       */},{key:'_trapFocus',value:function _trapFocus(){var focusable=Foundation.Keyboard.findFocusable(this.$element),first=focusable.eq(0),last=focusable.eq(-1);focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas',function(e){if(e.which===9||e.keycode===9){if(e.target===last[0]&&!e.shiftKey){e.preventDefault();first.focus();}if(e.target===first[0]&&e.shiftKey){e.preventDefault();last.focus();}}});}/**\n       * Allows the offcanvas to appear sticky utilizing translate properties.\n       * @private\n       */// OffCanvas.prototype._stick = function() {\n//   var elStyle = this.$element[0].style;\n//\n//   if (this.options.closeOnClick) {\n//     var exitStyle = this.$exiter[0].style;\n//   }\n//\n//   $(window).on('scroll.zf.offcanvas', function(e) {\n//     console.log(e);\n//     var pageY = window.pageYOffset;\n//     elStyle.transform = 'translate(0,' + pageY + 'px)';\n//     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }\n//   });\n//   // this.$element.trigger('stuck.zf.offcanvas');\n// };\n/**\n       * Closes the off-canvas menu.\n       * @function\n       * @param {Function} cb - optional cb to fire after closure.\n       * @fires OffCanvas#closed\n       */},{key:'close',value:function close(cb){if(!this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this;//  Foundation.Move(this.options.transitionTime, this.$element, function() {\n$('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-'+_this.options.position);_this.$element.removeClass('is-open');// Foundation._reflow();\n// });\nthis.$element.attr('aria-hidden','true')/**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#closed\n         */.trigger('closed.zf.offcanvas');// if (_this.options.isSticky || !_this.options.forceTop) {\n//   setTimeout(function() {\n//     _this.$element[0].style.transform = '';\n//     $(window).off('scroll.zf.offcanvas');\n//   }, this.options.transitionTime);\n// }\nif(this.options.closeOnClick){this.$exiter.removeClass('is-visible');}this.$triggers.attr('aria-expanded','false');if(this.options.trapFocus){$('[data-off-canvas-content]').removeAttr('tabindex');}}/**\n       * Toggles the off-canvas menu open or closed.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       */},{key:'toggle',value:function toggle(event,trigger){if(this.$element.hasClass('is-open')){this.close(event,trigger);}else{this.open(event,trigger);}}/**\n       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n       * @function\n       * @private\n       */},{key:'_handleKeyboard',value:function _handleKeyboard(event){if(event.which!==27)return;event.stopPropagation();event.preventDefault();this.close();this.$lastTrigger.focus();}/**\n       * Destroys the offcanvas plugin.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.close();this.$element.off('.zf.trigger .zf.offcanvas');this.$exiter.off('.zf.offcanvas');Foundation.unregisterPlugin(this);}}]);return OffCanvas;}();OffCanvas.defaults={/**\n     * Allow the user to click outside of the menu to close it.\n     * @option\n     * @example true\n     */closeOnClick:true,/**\n     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n     * @option\n     * @example 500\n     */transitionTime:0,/**\n     * Direction the offcanvas opens from. Determines class applied to body.\n     * @option\n     * @example left\n     */position:'left',/**\n     * Force the page to scroll to top on open.\n     * @option\n     * @example true\n     */forceTop:true,/**\n     * Allow the offcanvas to remain open for certain breakpoints.\n     * @option\n     * @example false\n     */isRevealed:false,/**\n     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n     * @option\n     * @example reveal-for-large\n     */revealOn:null,/**\n     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n     * @option\n     * @example true\n     */autoFocus:true,/**\n     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n     * @option\n     * TODO improve the regex testing for this.\n     * @example reveal-for-large\n     */revealClass:'reveal-for-',/**\n     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n     * @option\n     * @example true\n     */trapFocus:false};// Window exports\nFoundation.plugin(OffCanvas,'OffCanvas');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Orbit module.\n   * @module foundation.orbit\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.timerAndImageLoader\n   * @requires foundation.util.touch\n   */var Orbit=function(){/**\n    * Creates a new instance of an orbit carousel.\n    * @class\n    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\n    * @param {Object} options - Overrides to the default plugin settings.\n    */function Orbit(element,options){_classCallCheck(this,Orbit);this.$element=element;this.options=$.extend({},Orbit.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Orbit');Foundation.Keyboard.register('Orbit',{'ltr':{'ARROW_RIGHT':'next','ARROW_LEFT':'previous'},'rtl':{'ARROW_LEFT':'next','ARROW_RIGHT':'previous'}});}/**\n    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\n    * @function\n    * @private\n    */_createClass(Orbit,[{key:'_init',value:function _init(){this.$wrapper=this.$element.find('.'+this.options.containerClass);this.$slides=this.$element.find('.'+this.options.slideClass);var $images=this.$element.find('img'),initActive=this.$slides.filter('.is-active');if(!initActive.length){this.$slides.eq(0).addClass('is-active');}if(!this.options.useMUI){this.$slides.addClass('no-motionui');}if($images.length){Foundation.onImagesLoaded($images,this._prepareForOrbit.bind(this));}else{this._prepareForOrbit();//hehe\n}if(this.options.bullets){this._loadBullets();}this._events();if(this.options.autoPlay&&this.$slides.length>1){this.geoSync();}if(this.options.accessible){// allow wrapper to be focusable to enable arrow navigation\nthis.$wrapper.attr('tabindex',0);}}/**\n      * Creates a jQuery collection of bullets, if they are being used.\n      * @function\n      * @private\n      */},{key:'_loadBullets',value:function _loadBullets(){this.$bullets=this.$element.find('.'+this.options.boxOfBullets).find('button');}/**\n      * Sets a `timer` object on the orbit, and starts the counter for the next slide.\n      * @function\n      */},{key:'geoSync',value:function geoSync(){var _this=this;this.timer=new Foundation.Timer(this.$element,{duration:this.options.timerDelay,infinite:false},function(){_this.changeSlide(true);});this.timer.start();}/**\n      * Sets wrapper and slide heights for the orbit.\n      * @function\n      * @private\n      */},{key:'_prepareForOrbit',value:function _prepareForOrbit(){var _this=this;this._setWrapperHeight(function(max){_this._setSlideHeight(max);});}/**\n      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\n      * @function\n      * @private\n      * @param {Function} cb - a callback function to fire when complete.\n      */},{key:'_setWrapperHeight',value:function _setWrapperHeight(cb){//rewrite this to `for` loop\nvar max=0,temp,counter=0;this.$slides.each(function(){temp=this.getBoundingClientRect().height;$(this).attr('data-slide',counter);if(counter){//if not the first slide, set css position and display property\n$(this).css({'position':'relative','display':'none'});}max=temp>max?temp:max;counter++;});if(counter===this.$slides.length){this.$wrapper.css({'height':max});//only change the wrapper height property once.\ncb(max);//fire callback with max height dimension.\n}}/**\n      * Sets the max-height of each slide.\n      * @function\n      * @private\n      */},{key:'_setSlideHeight',value:function _setSlideHeight(height){this.$slides.each(function(){$(this).css('max-height',height);});}/**\n      * Adds event listeners to basically everything within the element.\n      * @function\n      * @private\n      */},{key:'_events',value:function _events(){var _this=this;//***************************************\n//**Now using custom event - thanks to:**\n//**      Yohai Ararat of Toronto      **\n//***************************************\nif(this.$slides.length>1){if(this.options.swipe){this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit',function(e){e.preventDefault();_this.changeSlide(true);}).on('swiperight.zf.orbit',function(e){e.preventDefault();_this.changeSlide(false);});}//***************************************\nif(this.options.autoPlay){this.$slides.on('click.zf.orbit',function(){_this.$element.data('clickedOn',_this.$element.data('clickedOn')?false:true);_this.timer[_this.$element.data('clickedOn')?'pause':'start']();});if(this.options.pauseOnHover){this.$element.on('mouseenter.zf.orbit',function(){_this.timer.pause();}).on('mouseleave.zf.orbit',function(){if(!_this.$element.data('clickedOn')){_this.timer.start();}});}}if(this.options.navButtons){var $controls=this.$element.find('.'+this.options.nextClass+', .'+this.options.prevClass);$controls.attr('tabindex',0)//also need to handle enter/return and spacebar key presses\n.on('click.zf.orbit touchend.zf.orbit',function(e){e.preventDefault();_this.changeSlide($(this).hasClass(_this.options.nextClass));});}if(this.options.bullets){this.$bullets.on('click.zf.orbit touchend.zf.orbit',function(){if(/is-active/g.test(this.className)){return false;}//if this is active, kick out of function.\nvar idx=$(this).data('slide'),ltr=idx>_this.$slides.filter('.is-active').data('slide'),$slide=_this.$slides.eq(idx);_this.changeSlide(ltr,$slide,idx);});}this.$wrapper.add(this.$bullets).on('keydown.zf.orbit',function(e){// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Orbit',{next:function next(){_this.changeSlide(true);},previous:function previous(){_this.changeSlide(false);},handled:function handled(){// if bullet is focused, make sure focus moves\nif($(e.target).is(_this.$bullets)){_this.$bullets.filter('.is-active').focus();}}});});}}/**\n      * Changes the current slide to a new one.\n      * @function\n      * @param {Boolean} isLTR - flag if the slide should move left to right.\n      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\n      * @param {Number} idx - the index of the new slide in its collection, if one chosen.\n      * @fires Orbit#slidechange\n      */},{key:'changeSlide',value:function changeSlide(isLTR,chosenSlide,idx){var $curSlide=this.$slides.filter('.is-active').eq(0);if(/mui/g.test($curSlide[0].className)){return false;}//if the slide is currently animating, kick out of the function\nvar $firstSlide=this.$slides.first(),$lastSlide=this.$slides.last(),dirIn=isLTR?'Right':'Left',dirOut=isLTR?'Left':'Right',_this=this,$newSlide;if(!chosenSlide){//most of the time, this will be auto played or clicked from the navButtons.\n$newSlide=isLTR?//if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\nthis.options.infiniteWrap?$curSlide.next('.'+this.options.slideClass).length?$curSlide.next('.'+this.options.slideClass):$firstSlide:$curSlide.next('.'+this.options.slideClass)://pick next slide if moving left to right\nthis.options.infiniteWrap?$curSlide.prev('.'+this.options.slideClass).length?$curSlide.prev('.'+this.options.slideClass):$lastSlide:$curSlide.prev('.'+this.options.slideClass);//pick prev slide if moving right to left\n}else{$newSlide=chosenSlide;}if($newSlide.length){if(this.options.bullets){idx=idx||this.$slides.index($newSlide);//grab index to update bullets\nthis._updateBullets(idx);}if(this.options.useMUI){Foundation.Motion.animateIn($newSlide.addClass('is-active').css({'position':'absolute','top':0}),this.options['animInFrom'+dirIn],function(){$newSlide.css({'position':'relative','display':'block'}).attr('aria-live','polite');});Foundation.Motion.animateOut($curSlide.removeClass('is-active'),this.options['animOutTo'+dirOut],function(){$curSlide.removeAttr('aria-live');if(_this.options.autoPlay&&!_this.timer.isPaused){_this.timer.restart();}//do stuff?\n});}else{$curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();$newSlide.addClass('is-active is-in').attr('aria-live','polite').show();if(this.options.autoPlay&&!this.timer.isPaused){this.timer.restart();}}/**\n          * Triggers when the slide has finished animating in.\n          * @event Orbit#slidechange\n          */this.$element.trigger('slidechange.zf.orbit',[$newSlide]);}}/**\n      * Updates the active state of the bullets, if displayed.\n      * @function\n      * @private\n      * @param {Number} idx - the index of the current slide.\n      */},{key:'_updateBullets',value:function _updateBullets(idx){var $oldBullet=this.$element.find('.'+this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),span=$oldBullet.find('span:last').detach(),$newBullet=this.$bullets.eq(idx).addClass('is-active').append(span);}/**\n      * Destroys the carousel and hides the element.\n      * @function\n      */},{key:'destroy',value:function destroy(){this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();Foundation.unregisterPlugin(this);}}]);return Orbit;}();Orbit.defaults={/**\n    * Tells the JS to look for and loadBullets.\n    * @option\n    * @example true\n    */bullets:true,/**\n    * Tells the JS to apply event listeners to nav buttons\n    * @option\n    * @example true\n    */navButtons:true,/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-in-right'\n    */animInFromRight:'slide-in-right',/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-out-right'\n    */animOutToRight:'slide-out-right',/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-in-left'\n    *\n    */animInFromLeft:'slide-in-left',/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-out-left'\n    */animOutToLeft:'slide-out-left',/**\n    * Allows Orbit to automatically animate on page load.\n    * @option\n    * @example true\n    */autoPlay:true,/**\n    * Amount of time, in ms, between slide transitions\n    * @option\n    * @example 5000\n    */timerDelay:5000,/**\n    * Allows Orbit to infinitely loop through the slides\n    * @option\n    * @example true\n    */infiniteWrap:true,/**\n    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\n    * @option\n    * @example true\n    */swipe:true,/**\n    * Allows the timing function to pause animation on hover.\n    * @option\n    * @example true\n    */pauseOnHover:true,/**\n    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\n    * @option\n    * @example true\n    */accessible:true,/**\n    * Class applied to the container of Orbit\n    * @option\n    * @example 'orbit-container'\n    */containerClass:'orbit-container',/**\n    * Class applied to individual slides.\n    * @option\n    * @example 'orbit-slide'\n    */slideClass:'orbit-slide',/**\n    * Class applied to the bullet container. You're welcome.\n    * @option\n    * @example 'orbit-bullets'\n    */boxOfBullets:'orbit-bullets',/**\n    * Class applied to the `next` navigation button.\n    * @option\n    * @example 'orbit-next'\n    */nextClass:'orbit-next',/**\n    * Class applied to the `previous` navigation button.\n    * @option\n    * @example 'orbit-previous'\n    */prevClass:'orbit-previous',/**\n    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\n    * @option\n    * @example true\n    */useMUI:true};// Window exports\nFoundation.plugin(Orbit,'Orbit');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * ResponsiveMenu module.\n   * @module foundation.responsiveMenu\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.accordionMenu\n   * @requires foundation.util.drilldown\n   * @requires foundation.util.dropdown-menu\n   */var ResponsiveMenu=function(){/**\n     * Creates a new instance of a responsive menu.\n     * @class\n     * @fires ResponsiveMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function ResponsiveMenu(element,options){_classCallCheck(this,ResponsiveMenu);this.$element=$(element);this.rules=this.$element.data('responsive-menu');this.currentMq=null;this.currentPlugin=null;this._init();this._events();Foundation.registerPlugin(this,'ResponsiveMenu');}/**\n     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n     * @function\n     * @private\n     */_createClass(ResponsiveMenu,[{key:'_init',value:function _init(){// The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\nif(typeof this.rules==='string'){var rulesTree={};// Parse rules from \"classes\" pulled from data attribute\nvar rules=this.rules.split(' ');// Iterate through every rule found\nfor(var i=0;i<rules.length;i++){var rule=rules[i].split('-');var ruleSize=rule.length>1?rule[0]:'small';var rulePlugin=rule.length>1?rule[1]:rule[0];if(MenuPlugins[rulePlugin]!==null){rulesTree[ruleSize]=MenuPlugins[rulePlugin];}}this.rules=rulesTree;}if(!$.isEmptyObject(this.rules)){this._checkMediaQueries();}}/**\n       * Initializes events for the Menu.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;$(window).on('changed.zf.mediaquery',function(){_this._checkMediaQueries();});// $(window).on('resize.zf.ResponsiveMenu', function() {\n//   _this._checkMediaQueries();\n// });\n}/**\n       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n       * @function\n       * @private\n       */},{key:'_checkMediaQueries',value:function _checkMediaQueries(){var matchedMq,_this=this;// Iterate through each rule and find the last matching rule\n$.each(this.rules,function(key){if(Foundation.MediaQuery.atLeast(key)){matchedMq=key;}});// No match? No dice\nif(!matchedMq)return;// Plugin already initialized? We good\nif(this.currentPlugin instanceof this.rules[matchedMq].plugin)return;// Remove existing plugin-specific CSS classes\n$.each(MenuPlugins,function(key,value){_this.$element.removeClass(value.cssClass);});// Add the CSS class for the new plugin\nthis.$element.addClass(this.rules[matchedMq].cssClass);// Create an instance of the new plugin\nif(this.currentPlugin)this.currentPlugin.destroy();this.currentPlugin=new this.rules[matchedMq].plugin(this.$element,{});}/**\n       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.currentPlugin.destroy();$(window).off('.zf.ResponsiveMenu');Foundation.unregisterPlugin(this);}}]);return ResponsiveMenu;}();ResponsiveMenu.defaults={};// The plugin matches the plugin classes with these plugin instances.\nvar MenuPlugins={dropdown:{cssClass:'dropdown',plugin:Foundation._plugins['dropdown-menu']||null},drilldown:{cssClass:'drilldown',plugin:Foundation._plugins['drilldown']||null},accordion:{cssClass:'accordion-menu',plugin:Foundation._plugins['accordion-menu']||null}};// Window exports\nFoundation.plugin(ResponsiveMenu,'ResponsiveMenu');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * ResponsiveToggle module.\n   * @module foundation.responsiveToggle\n   * @requires foundation.util.mediaQuery\n   */var ResponsiveToggle=function(){/**\n     * Creates a new instance of Tab Bar.\n     * @class\n     * @fires ResponsiveToggle#init\n     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function ResponsiveToggle(element,options){_classCallCheck(this,ResponsiveToggle);this.$element=$(element);this.options=$.extend({},ResponsiveToggle.defaults,this.$element.data(),options);this._init();this._events();Foundation.registerPlugin(this,'ResponsiveToggle');}/**\n     * Initializes the tab bar by finding the target element, toggling element, and running update().\n     * @function\n     * @private\n     */_createClass(ResponsiveToggle,[{key:'_init',value:function _init(){var targetID=this.$element.data('responsive-toggle');if(!targetID){console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');}this.$targetMenu=$('#'+targetID);this.$toggler=this.$element.find('[data-toggle]');this._update();}/**\n       * Adds necessary event handlers for the tab bar to work.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this._updateMqHandler=this._update.bind(this);$(window).on('changed.zf.mediaquery',this._updateMqHandler);this.$toggler.on('click.zf.responsiveToggle',this.toggleMenu.bind(this));}/**\n       * Checks the current media query to determine if the tab bar should be visible or hidden.\n       * @function\n       * @private\n       */},{key:'_update',value:function _update(){// Mobile\nif(!Foundation.MediaQuery.atLeast(this.options.hideFor)){this.$element.show();this.$targetMenu.hide();}// Desktop\nelse{this.$element.hide();this.$targetMenu.show();}}/**\n       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n       * @function\n       * @fires ResponsiveToggle#toggled\n       */},{key:'toggleMenu',value:function toggleMenu(){if(!Foundation.MediaQuery.atLeast(this.options.hideFor)){this.$targetMenu.toggle(0);/**\n           * Fires when the element attached to the tab bar toggles.\n           * @event ResponsiveToggle#toggled\n           */this.$element.trigger('toggled.zf.responsiveToggle');}}},{key:'destroy',value:function destroy(){this.$element.off('.zf.responsiveToggle');this.$toggler.off('.zf.responsiveToggle');$(window).off('changed.zf.mediaquery',this._updateMqHandler);Foundation.unregisterPlugin(this);}}]);return ResponsiveToggle;}();ResponsiveToggle.defaults={/**\n     * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n     * @option\n     * @example 'medium'\n     */hideFor:'medium'};// Window exports\nFoundation.plugin(ResponsiveToggle,'ResponsiveToggle');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Reveal module.\n   * @module foundation.reveal\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.motion if using animations\n   */var Reveal=function(){/**\n     * Creates a new instance of Reveal.\n     * @class\n     * @param {jQuery} element - jQuery object to use for the modal.\n     * @param {Object} options - optional parameters.\n     */function Reveal(element,options){_classCallCheck(this,Reveal);this.$element=element;this.options=$.extend({},Reveal.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Reveal');Foundation.Keyboard.register('Reveal',{'ENTER':'open','SPACE':'open','ESCAPE':'close','TAB':'tab_forward','SHIFT_TAB':'tab_backward'});}/**\n     * Initializes the modal by adding the overlay and close buttons, (if selected).\n     * @private\n     */_createClass(Reveal,[{key:'_init',value:function _init(){this.id=this.$element.attr('id');this.isActive=false;this.cached={mq:Foundation.MediaQuery.current};this.isMobile=mobileSniff();this.$anchor=$('[data-open=\"'+this.id+'\"]').length?$('[data-open=\"'+this.id+'\"]'):$('[data-toggle=\"'+this.id+'\"]');this.$anchor.attr({'aria-controls':this.id,'aria-haspopup':true,'tabindex':0});if(this.options.fullScreen||this.$element.hasClass('full')){this.options.fullScreen=true;this.options.overlay=false;}if(this.options.overlay&&!this.$overlay){this.$overlay=this._makeOverlay(this.id);}this.$element.attr({'role':'dialog','aria-hidden':true,'data-yeti-box':this.id,'data-resize':this.id});if(this.$overlay){this.$element.detach().appendTo(this.$overlay);}else{this.$element.detach().appendTo($('body'));this.$element.addClass('without-overlay');}this._events();if(this.options.deepLink&&window.location.hash==='#'+this.id){$(window).one('load.zf.reveal',this.open.bind(this));}}/**\n       * Creates an overlay div to display behind the modal.\n       * @private\n       */},{key:'_makeOverlay',value:function _makeOverlay(id){var $overlay=$('<div></div>').addClass('reveal-overlay').appendTo('body');return $overlay;}/**\n       * Updates position of modal\n       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n       * @private\n       */},{key:'_updatePosition',value:function _updatePosition(){var width=this.$element.outerWidth();var outerWidth=$(window).width();var height=this.$element.outerHeight();var outerHeight=$(window).height();var left,top;if(this.options.hOffset==='auto'){left=parseInt((outerWidth-width)/2,10);}else{left=parseInt(this.options.hOffset,10);}if(this.options.vOffset==='auto'){if(height>outerHeight){top=parseInt(Math.min(100,outerHeight/10),10);}else{top=parseInt((outerHeight-height)/4,10);}}else{top=parseInt(this.options.vOffset,10);}this.$element.css({top:top+'px'});// only worry about left if we don't have an overlay or we havea  horizontal offset,\n// otherwise we're perfectly in the middle\nif(!this.$overlay||this.options.hOffset!=='auto'){this.$element.css({left:left+'px'});this.$element.css({margin:'0px'});}}/**\n       * Adds event handlers for the modal.\n       * @private\n       */},{key:'_events',value:function _events(){var _this2=this;var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':function closeZfTrigger(event,$element){if(event.target===_this.$element[0]||$(event.target).parents('[data-closable]')[0]===$element){// only close reveal when it's explicitly called\nreturn _this2.close.apply(_this2);}},'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':function resizemeZfTrigger(){_this._updatePosition();}});if(this.$anchor.length){this.$anchor.on('keydown.zf.reveal',function(e){if(e.which===13||e.which===32){e.stopPropagation();e.preventDefault();_this.open();}});}if(this.options.closeOnClick&&this.options.overlay){this.$overlay.off('.zf.reveal').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}_this.close();});}if(this.options.deepLink){$(window).on('popstate.zf.reveal:'+this.id,this._handleState.bind(this));}}/**\n       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n       * @private\n       */},{key:'_handleState',value:function _handleState(e){if(window.location.hash==='#'+this.id&&!this.isActive){this.open();}else{this.close();}}/**\n       * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n       * @function\n       * @fires Reveal#closeme\n       * @fires Reveal#open\n       */},{key:'open',value:function open(){var _this3=this;if(this.options.deepLink){var hash='#'+this.id;if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}this.isActive=true;// Make elements invisible, but remove display: none so we can get size and positioning\nthis.$element.css({'visibility':'hidden'}).show().scrollTop(0);if(this.options.overlay){this.$overlay.css({'visibility':'hidden'}).show();}this._updatePosition();this.$element.hide().css({'visibility':''});if(this.$overlay){this.$overlay.css({'visibility':''}).hide();if(this.$element.hasClass('fast')){this.$overlay.addClass('fast');}else if(this.$element.hasClass('slow')){this.$overlay.addClass('slow');}}if(!this.options.multipleOpened){/**\n           * Fires immediately before the modal opens.\n           * Closes any other modals that are currently open\n           * @event Reveal#closeme\n           */this.$element.trigger('closeme.zf.reveal',this.id);}// Motion UI method of reveal\nif(this.options.animationIn){var _this;(function(){var afterAnimationFocus=function afterAnimationFocus(){_this.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();console.log('focus');};_this=_this3;if(_this3.options.overlay){Foundation.Motion.animateIn(_this3.$overlay,'fade-in');}Foundation.Motion.animateIn(_this3.$element,_this3.options.animationIn,function(){_this3.focusableElements=Foundation.Keyboard.findFocusable(_this3.$element);afterAnimationFocus();});})();}// jQuery method of reveal\nelse{if(this.options.overlay){this.$overlay.show(0);}this.$element.show(this.options.showDelay);}// handle accessibility\nthis.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();/**\n         * Fires when the modal has successfully opened.\n         * @event Reveal#open\n         */this.$element.trigger('open.zf.reveal');if(this.isMobile){this.originalScrollPos=window.pageYOffset;$('html, body').addClass('is-reveal-open');}else{$('body').addClass('is-reveal-open');}setTimeout(function(){_this3._extraHandlers();},0);}/**\n       * Adds extra event handlers for the body and window if necessary.\n       * @private\n       */},{key:'_extraHandlers',value:function _extraHandlers(){var _this=this;this.focusableElements=Foundation.Keyboard.findFocusable(this.$element);if(!this.options.overlay&&this.options.closeOnClick&&!this.options.fullScreen){$('body').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}_this.close();});}if(this.options.closeOnEsc){$(window).on('keydown.zf.reveal',function(e){Foundation.Keyboard.handleKey(e,'Reveal',{close:function close(){if(_this.options.closeOnEsc){_this.close();_this.$anchor.focus();}}});});}// lock focus within modal while tabbing\nthis.$element.on('keydown.zf.reveal',function(e){var $target=$(this);// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Reveal',{tab_forward:function tab_forward(){if(_this.$element.find(':focus').is(_this.focusableElements.eq(-1))){// left modal downwards, setting focus to first element\n_this.focusableElements.eq(0).focus();return true;}if(_this.focusableElements.length===0){// no focusable elements inside the modal at all, prevent tabbing in general\nreturn true;}},tab_backward:function tab_backward(){if(_this.$element.find(':focus').is(_this.focusableElements.eq(0))||_this.$element.is(':focus')){// left modal upwards, setting focus to last element\n_this.focusableElements.eq(-1).focus();return true;}if(_this.focusableElements.length===0){// no focusable elements inside the modal at all, prevent tabbing in general\nreturn true;}},open:function open(){if(_this.$element.find(':focus').is(_this.$element.find('[data-close]'))){setTimeout(function(){// set focus back to anchor if close button has been activated\n_this.$anchor.focus();},1);}else if($target.is(_this.focusableElements)){// dont't trigger if acual element has focus (i.e. inputs, links, ...)\n_this.open();}},close:function close(){if(_this.options.closeOnEsc){_this.close();_this.$anchor.focus();}},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}}});});}/**\n       * Closes the modal.\n       * @function\n       * @fires Reveal#closed\n       */},{key:'close',value:function close(){if(!this.isActive||!this.$element.is(':visible')){return false;}var _this=this;// Motion UI method of hiding\nif(this.options.animationOut){if(this.options.overlay){Foundation.Motion.animateOut(this.$overlay,'fade-out',finishUp);}else{finishUp();}Foundation.Motion.animateOut(this.$element,this.options.animationOut);}// jQuery method of hiding\nelse{if(this.options.overlay){this.$overlay.hide(0,finishUp);}else{finishUp();}this.$element.hide(this.options.hideDelay);}// Conditionals to remove extra event listeners added on open\nif(this.options.closeOnEsc){$(window).off('keydown.zf.reveal');}if(!this.options.overlay&&this.options.closeOnClick){$('body').off('click.zf.reveal');}this.$element.off('keydown.zf.reveal');function finishUp(){if(_this.isMobile){$('html, body').removeClass('is-reveal-open');if(_this.originalScrollPos){$('body').scrollTop(_this.originalScrollPos);_this.originalScrollPos=null;}}else{$('body').removeClass('is-reveal-open');}_this.$element.attr('aria-hidden',true);/**\n          * Fires when the modal is done closing.\n          * @event Reveal#closed\n          */_this.$element.trigger('closed.zf.reveal');}/**\n        * Resets the modal content\n        * This prevents a running video to keep going in the background\n        */if(this.options.resetOnClose){this.$element.html(this.$element.html());}this.isActive=false;if(_this.options.deepLink){if(window.history.replaceState){window.history.replaceState(\"\",document.title,window.location.pathname);}else{window.location.hash='';}}}/**\n       * Toggles the open/closed state of a modal.\n       * @function\n       */},{key:'toggle',value:function toggle(){if(this.isActive){this.close();}else{this.open();}}},{key:'destroy',/**\n       * Destroys an instance of a modal.\n       * @function\n       */value:function destroy(){if(this.options.overlay){this.$element.appendTo($('body'));// move $element outside of $overlay to prevent error unregisterPlugin()\nthis.$overlay.hide().off().remove();}this.$element.hide().off();this.$anchor.off('.zf');$(window).off('.zf.reveal:'+this.id);Foundation.unregisterPlugin(this);}}]);return Reveal;}();Reveal.defaults={/**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-in-left'\n     */animationIn:'',/**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-out-right'\n     */animationOut:'',/**\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */showDelay:0,/**\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */hideDelay:0,/**\n     * Allows a click on the body/overlay to close the modal.\n     * @option\n     * @example true\n     */closeOnClick:true,/**\n     * Allows the modal to close if the user presses the `ESCAPE` key.\n     * @option\n     * @example true\n     */closeOnEsc:true,/**\n     * If true, allows multiple modals to be displayed at once.\n     * @option\n     * @example false\n     */multipleOpened:false,/**\n     * Distance, in pixels, the modal should push down from the top of the screen.\n     * @option\n     * @example auto\n     */vOffset:'auto',/**\n     * Distance, in pixels, the modal should push in from the side of the screen.\n     * @option\n     * @example auto\n     */hOffset:'auto',/**\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n     * @option\n     * @example false\n     */fullScreen:false,/**\n     * Percentage of screen height the modal should push up from the bottom of the view.\n     * @option\n     * @example 10\n     */btmOffsetPct:10,/**\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n     * @option\n     * @example true\n     */overlay:true,/**\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n     * @option\n     * @example false\n     */resetOnClose:false,/**\n     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n     * @option\n     * @example false\n     */deepLink:false};// Window exports\nFoundation.plugin(Reveal,'Reveal');function iPhoneSniff(){return /iP(ad|hone|od).*OS/.test(window.navigator.userAgent);}function androidSniff(){return /Android/.test(window.navigator.userAgent);}function mobileSniff(){return iPhoneSniff()||androidSniff();}}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Slider module.\n   * @module foundation.slider\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.touch\n   */var Slider=function(){/**\n     * Creates a new instance of a drilldown menu.\n     * @class\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Slider(element,options){_classCallCheck(this,Slider);this.$element=element;this.options=$.extend({},Slider.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Slider');Foundation.Keyboard.register('Slider',{'ltr':{'ARROW_RIGHT':'increase','ARROW_UP':'increase','ARROW_DOWN':'decrease','ARROW_LEFT':'decrease','SHIFT_ARROW_RIGHT':'increase_fast','SHIFT_ARROW_UP':'increase_fast','SHIFT_ARROW_DOWN':'decrease_fast','SHIFT_ARROW_LEFT':'decrease_fast'},'rtl':{'ARROW_LEFT':'increase','ARROW_RIGHT':'decrease','SHIFT_ARROW_LEFT':'increase_fast','SHIFT_ARROW_RIGHT':'decrease_fast'}});}/**\n     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n     * @function\n     * @private\n     */_createClass(Slider,[{key:'_init',value:function _init(){this.inputs=this.$element.find('input');this.handles=this.$element.find('[data-slider-handle]');this.$handle=this.handles.eq(0);this.$input=this.inputs.length?this.inputs.eq(0):$('#'+this.$handle.attr('aria-controls'));this.$fill=this.$element.find('[data-slider-fill]').css(this.options.vertical?'height':'width',0);var isDbl=false,_this=this;if(this.options.disabled||this.$element.hasClass(this.options.disabledClass)){this.options.disabled=true;this.$element.addClass(this.options.disabledClass);}if(!this.inputs.length){this.inputs=$().add(this.$input);this.options.binding=true;}this._setInitAttr(0);this._events(this.$handle);if(this.handles[1]){this.options.doubleSided=true;this.$handle2=this.handles.eq(1);this.$input2=this.inputs.length>1?this.inputs.eq(1):$('#'+this.$handle2.attr('aria-controls'));if(!this.inputs[1]){this.inputs=this.inputs.add(this.$input2);}isDbl=true;this._setHandlePos(this.$handle,this.options.initialStart,true,function(){_this._setHandlePos(_this.$handle2,_this.options.initialEnd,true);});// this.$handle.triggerHandler('click.zf.slider');\nthis._setInitAttr(1);this._events(this.$handle2);}if(!isDbl){this._setHandlePos(this.$handle,this.options.initialStart,true);}}/**\n       * Sets the position of the selected handle and fill bar.\n       * @function\n       * @private\n       * @param {jQuery} $hndl - the selected handle to move.\n       * @param {Number} location - floating point between the start and end values of the slider bar.\n       * @param {Function} cb - callback function to fire on completion.\n       * @fires Slider#moved\n       * @fires Slider#changed\n       */},{key:'_setHandlePos',value:function _setHandlePos($hndl,location,noInvert,cb){// don't move if the slider has been disabled since its initialization\nif(this.$element.hasClass(this.options.disabledClass)){return;}//might need to alter that slightly for bars that will have odd number selections.\nlocation=parseFloat(location);//on input change events, convert string to number...grumble.\n// prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\nif(location<this.options.start){location=this.options.start;}else if(location>this.options.end){location=this.options.end;}var isDbl=this.options.doubleSided;if(isDbl){//this block is to prevent 2 handles from crossing eachother. Could/should be improved.\nif(this.handles.index($hndl)===0){var h2Val=parseFloat(this.$handle2.attr('aria-valuenow'));location=location>=h2Val?h2Val-this.options.step:location;}else{var h1Val=parseFloat(this.$handle.attr('aria-valuenow'));location=location<=h1Val?h1Val+this.options.step:location;}}//this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n//for click and drag events, it's weird due to the scale(-1, 1) css property\nif(this.options.vertical&&!noInvert){location=this.options.end-location;}var _this=this,vert=this.options.vertical,hOrW=vert?'height':'width',lOrT=vert?'top':'left',handleDim=$hndl[0].getBoundingClientRect()[hOrW],elemDim=this.$element[0].getBoundingClientRect()[hOrW],//percentage of bar min/max value based on click or drag point\npctOfBar=percent(location-this.options.start,this.options.end-this.options.start).toFixed(2),//number of actual pixels to shift the handle, based on the percentage obtained above\npxToMove=(elemDim-handleDim)*pctOfBar,//percentage of bar to shift the handle\nmovement=(percent(pxToMove,elemDim)*100).toFixed(this.options.decimal);//fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\nlocation=parseFloat(location.toFixed(this.options.decimal));// declare empty object for css adjustments, only used with 2 handled-sliders\nvar css={};this._setValues($hndl,location);// TODO update to calculate based on values set to respective inputs??\nif(isDbl){var isLeftHndl=this.handles.index($hndl)===0,//empty variable, will be used for min-height/width for fill bar\ndim,//percentage w/h of the handle compared to the slider bar\nhandlePct=~~(percent(handleDim,elemDim)*100);//if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\nif(isLeftHndl){//left or top percentage value to apply to the fill bar.\ncss[lOrT]=movement+'%';//calculate the new min-height/width for the fill bar.\ndim=parseFloat(this.$handle2[0].style[lOrT])-movement+handlePct;//this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n//plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\nif(cb&&typeof cb==='function'){cb();}//this is only needed for the initialization of 2 handled sliders\n}else{//just caching the value of the left/bottom handle's left/top property\nvar handlePos=parseFloat(this.$handle[0].style[lOrT]);//calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n//based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\ndim=movement-(isNaN(handlePos)?this.options.initialStart/((this.options.end-this.options.start)/100):handlePos)+handlePct;}// assign the min-height/width to our css object\ncss['min-'+hOrW]=dim+'%';}this.$element.one('finished.zf.animate',function(){/**\n           * Fires when the handle is done moving.\n           * @event Slider#moved\n           */_this.$element.trigger('moved.zf.slider',[$hndl]);});//because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\nvar moveTime=this.$element.data('dragging')?1000/60:this.options.moveTime;Foundation.Move(moveTime,$hndl,function(){//adjusting the left/top property of the handle, based on the percentage calculated above\n$hndl.css(lOrT,movement+'%');if(!_this.options.doubleSided){//if single-handled, a simple method to expand the fill bar\n_this.$fill.css(hOrW,pctOfBar*100+'%');}else{//otherwise, use the css object we created above\n_this.$fill.css(css);}});/**\n         * Fires when the value has not been change for a given time.\n         * @event Slider#changed\n         */clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.$element.trigger('changed.zf.slider',[$hndl]);},_this.options.changedDelay);}/**\n       * Sets the initial attribute for the slider element.\n       * @function\n       * @private\n       * @param {Number} idx - index of the current handle/input to use.\n       */},{key:'_setInitAttr',value:function _setInitAttr(idx){var id=this.inputs.eq(idx).attr('id')||Foundation.GetYoDigits(6,'slider');this.inputs.eq(idx).attr({'id':id,'max':this.options.end,'min':this.options.start,'step':this.options.step});this.handles.eq(idx).attr({'role':'slider','aria-controls':id,'aria-valuemax':this.options.end,'aria-valuemin':this.options.start,'aria-valuenow':idx===0?this.options.initialStart:this.options.initialEnd,'aria-orientation':this.options.vertical?'vertical':'horizontal','tabindex':0});}/**\n       * Sets the input and `aria-valuenow` values for the slider element.\n       * @function\n       * @private\n       * @param {jQuery} $handle - the currently selected handle.\n       * @param {Number} val - floating point of the new value.\n       */},{key:'_setValues',value:function _setValues($handle,val){var idx=this.options.doubleSided?this.handles.index($handle):0;this.inputs.eq(idx).val(val);$handle.attr('aria-valuenow',val);}/**\n       * Handles events on the slider element.\n       * Calculates the new location of the current handle.\n       * If there are two handles and the bar was clicked, it determines which handle to move.\n       * @function\n       * @private\n       * @param {Object} e - the `event` object passed from the listener.\n       * @param {jQuery} $handle - the current handle to calculate for, if selected.\n       * @param {Number} val - floating point number for the new value of the slider.\n       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n       */},{key:'_handleEvent',value:function _handleEvent(e,$handle,val){var value,hasVal;if(!val){//click or drag events\ne.preventDefault();var _this=this,vertical=this.options.vertical,param=vertical?'height':'width',direction=vertical?'top':'left',eventOffset=vertical?e.pageY:e.pageX,halfOfHandle=this.$handle[0].getBoundingClientRect()[param]/2,barDim=this.$element[0].getBoundingClientRect()[param],windowScroll=vertical?$(window).scrollTop():$(window).scrollLeft();var elemOffset=this.$element.offset()[direction];// touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n// best way to guess this is simulated is if clientY == pageY\nif(e.clientY===e.pageY){eventOffset=eventOffset+windowScroll;}var eventFromBar=eventOffset-elemOffset;var barXY;if(eventFromBar<0){barXY=0;}else if(eventFromBar>barDim){barXY=barDim;}else{barXY=eventFromBar;}offsetPct=percent(barXY,barDim);value=(this.options.end-this.options.start)*offsetPct+this.options.start;// turn everything around for RTL, yay math!\nif(Foundation.rtl()&&!this.options.vertical){value=this.options.end-value;}value=_this._adjustValue(null,value);//boolean flag for the setHandlePos fn, specifically for vertical sliders\nhasVal=false;if(!$handle){//figure out which handle it is, pass it to the next function.\nvar firstHndlPos=absPosition(this.$handle,direction,barXY,param),secndHndlPos=absPosition(this.$handle2,direction,barXY,param);$handle=firstHndlPos<=secndHndlPos?this.$handle:this.$handle2;}}else{//change event on input\nvalue=this._adjustValue(null,val);hasVal=true;}this._setHandlePos($handle,value,hasVal);}/**\n       * Adjustes value for handle in regard to step value. returns adjusted value\n       * @function\n       * @private\n       * @param {jQuery} $handle - the selected handle.\n       * @param {Number} value - value to adjust. used if $handle is falsy\n       */},{key:'_adjustValue',value:function _adjustValue($handle,value){var val,step=this.options.step,div=parseFloat(step/2),left,prev_val,next_val;if(!!$handle){val=parseFloat($handle.attr('aria-valuenow'));}else{val=value;}left=val%step;prev_val=val-left;next_val=prev_val+step;if(left===0){return val;}val=val>=prev_val+div?next_val:prev_val;return val;}/**\n       * Adds event listeners to the slider elements.\n       * @function\n       * @private\n       * @param {jQuery} $handle - the current handle to apply listeners to.\n       */},{key:'_events',value:function _events($handle){var _this=this,curHandle,timer;this.inputs.off('change.zf.slider').on('change.zf.slider',function(e){var idx=_this.inputs.index($(this));_this._handleEvent(e,_this.handles.eq(idx),$(this).val());});if(this.options.clickSelect){this.$element.off('click.zf.slider').on('click.zf.slider',function(e){if(_this.$element.data('dragging')){return false;}if(!$(e.target).is('[data-slider-handle]')){if(_this.options.doubleSided){_this._handleEvent(e);}else{_this._handleEvent(e,_this.$handle);}}});}if(this.options.draggable){this.handles.addTouch();var $body=$('body');$handle.off('mousedown.zf.slider').on('mousedown.zf.slider',function(e){$handle.addClass('is-dragging');_this.$fill.addClass('is-dragging');//\n_this.$element.data('dragging',true);curHandle=$(e.currentTarget);$body.on('mousemove.zf.slider',function(e){e.preventDefault();_this._handleEvent(e,curHandle);}).on('mouseup.zf.slider',function(e){_this._handleEvent(e,curHandle);$handle.removeClass('is-dragging');_this.$fill.removeClass('is-dragging');_this.$element.data('dragging',false);$body.off('mousemove.zf.slider mouseup.zf.slider');});})// prevent events triggered by touch\n.on('selectstart.zf.slider touchmove.zf.slider',function(e){e.preventDefault();});}$handle.off('keydown.zf.slider').on('keydown.zf.slider',function(e){var _$handle=$(this),idx=_this.options.doubleSided?_this.handles.index(_$handle):0,oldValue=parseFloat(_this.inputs.eq(idx).val()),newValue;// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Slider',{decrease:function decrease(){newValue=oldValue-_this.options.step;},increase:function increase(){newValue=oldValue+_this.options.step;},decrease_fast:function decrease_fast(){newValue=oldValue-_this.options.step*10;},increase_fast:function increase_fast(){newValue=oldValue+_this.options.step*10;},handled:function handled(){// only set handle pos when event was handled specially\ne.preventDefault();_this._setHandlePos(_$handle,newValue,true);}});/*if (newValue) { // if pressed key has special function, update value\n            e.preventDefault();\n            _this._setHandlePos(_$handle, newValue);\n          }*/});}/**\n       * Destroys the slider plugin.\n       */},{key:'destroy',value:function destroy(){this.handles.off('.zf.slider');this.inputs.off('.zf.slider');this.$element.off('.zf.slider');Foundation.unregisterPlugin(this);}}]);return Slider;}();Slider.defaults={/**\n     * Minimum value for the slider scale.\n     * @option\n     * @example 0\n     */start:0,/**\n     * Maximum value for the slider scale.\n     * @option\n     * @example 100\n     */end:100,/**\n     * Minimum value change per change event.\n     * @option\n     * @example 1\n     */step:1,/**\n     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n     * @option\n     * @example 0\n     */initialStart:0,/**\n     * Value at which the right handle/second input should be set to on initialization.\n     * @option\n     * @example 100\n     */initialEnd:100,/**\n     * Allows the input to be located outside the container and visible. Set to by the JS\n     * @option\n     * @example false\n     */binding:false,/**\n     * Allows the user to click/tap on the slider bar to select a value.\n     * @option\n     * @example true\n     */clickSelect:true,/**\n     * Set to true and use the `vertical` class to change alignment to vertical.\n     * @option\n     * @example false\n     */vertical:false,/**\n     * Allows the user to drag the slider handle(s) to select a value.\n     * @option\n     * @example true\n     */draggable:true,/**\n     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n     * @option\n     * @example false\n     */disabled:false,/**\n     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n     * @option\n     * @example false\n     */doubleSided:false,/**\n     * Potential future feature.\n     */// steps: 100,\n/**\n     * Number of decimal places the plugin should go to for floating point precision.\n     * @option\n     * @example 2\n     */decimal:2,/**\n     * Time delay for dragged elements.\n     */// dragDelay: 0,\n/**\n     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n     * @option\n     * @example 200\n     */moveTime:200,//update this if changing the transition time in the sass\n/**\n     * Class applied to disabled sliders.\n     * @option\n     * @example 'disabled'\n     */disabledClass:'disabled',/**\n     * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n     * @option\n     * @example false\n     */invertVertical:false,/**\n     * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n     * @option\n     * @example 500\n     */changedDelay:500};function percent(frac,num){return frac/num;}function absPosition($handle,dir,clickPos,param){return Math.abs($handle.position()[dir]+$handle[param]()/2-clickPos);}// Window exports\nFoundation.plugin(Slider,'Slider');}(jQuery);//*********this is in case we go to static, absolute positions instead of dynamic positioning********\n// this.setSteps(function() {\n//   _this._events();\n//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;\n//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;\n//   if (initStart || initEnd) {\n//     _this._handleEvent(initStart, initEnd);\n//   }\n// });\n//***********the other part of absolute positions*************\n// Slider.prototype.setSteps = function(cb) {\n//   var posChange = this.$element.outerWidth() / this.options.steps;\n//   var counter = 0\n//   while(counter < this.options.steps) {\n//     if (counter) {\n//       this.options.positions.push(this.options.positions[counter - 1] + posChange);\n//     } else {\n//       this.options.positions.push(posChange);\n//     }\n//     counter++;\n//   }\n//   cb();\n// };\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Sticky module.\n   * @module foundation.sticky\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   */var Sticky=function(){/**\n     * Creates a new instance of a sticky thing.\n     * @class\n     * @param {jQuery} element - jQuery object to make sticky.\n     * @param {Object} options - options object passed when creating the element programmatically.\n     */function Sticky(element,options){_classCallCheck(this,Sticky);this.$element=element;this.options=$.extend({},Sticky.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Sticky');}/**\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n     * @function\n     * @private\n     */_createClass(Sticky,[{key:'_init',value:function _init(){var $parent=this.$element.parent('[data-sticky-container]'),id=this.$element[0].id||Foundation.GetYoDigits(6,'sticky'),_this=this;if(!$parent.length){this.wasWrapped=true;}this.$container=$parent.length?$parent:$(this.options.container).wrapInner(this.$element);this.$container.addClass(this.options.containerClass);this.$element.addClass(this.options.stickyClass).attr({'data-resize':id});this.scrollCount=this.options.checkEvery;this.isStuck=false;$(window).one('load.zf.sticky',function(){if(_this.options.anchor!==''){_this.$anchor=$('#'+_this.options.anchor);}else{_this._parsePoints();}_this._setSizes(function(){_this._calc(false);});_this._events(id.split('-').reverse().join('-'));});}/**\n       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n       * @function\n       * @private\n       */},{key:'_parsePoints',value:function _parsePoints(){var top=this.options.topAnchor==\"\"?1:this.options.topAnchor,btm=this.options.btmAnchor==\"\"?document.documentElement.scrollHeight:this.options.btmAnchor,pts=[top,btm],breaks={};for(var i=0,len=pts.length;i<len&&pts[i];i++){var pt;if(typeof pts[i]==='number'){pt=pts[i];}else{var place=pts[i].split(':'),anchor=$('#'+place[0]);pt=anchor.offset().top;if(place[1]&&place[1].toLowerCase()==='bottom'){pt+=anchor[0].getBoundingClientRect().height;}}breaks[i]=pt;}this.points=breaks;return;}/**\n       * Adds event handlers for the scrolling element.\n       * @private\n       * @param {String} id - psuedo-random id for unique scroll event listener.\n       */},{key:'_events',value:function _events(id){var _this=this,scrollListener=this.scrollListener='scroll.zf.'+id;if(this.isOn){return;}if(this.canStick){this.isOn=true;$(window).off(scrollListener).on(scrollListener,function(e){if(_this.scrollCount===0){_this.scrollCount=_this.options.checkEvery;_this._setSizes(function(){_this._calc(false,window.pageYOffset);});}else{_this.scrollCount--;_this._calc(false,window.pageYOffset);}});}this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger',function(e,el){_this._setSizes(function(){_this._calc(false);if(_this.canStick){if(!_this.isOn){_this._events(id);}}else if(_this.isOn){_this._pauseListeners(scrollListener);}});});}/**\n       * Removes event handlers for scroll and change events on anchor.\n       * @fires Sticky#pause\n       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n       */},{key:'_pauseListeners',value:function _pauseListeners(scrollListener){this.isOn=false;$(window).off(scrollListener);/**\n         * Fires when the plugin is paused due to resize event shrinking the view.\n         * @event Sticky#pause\n         * @private\n         */this.$element.trigger('pause.zf.sticky');}/**\n       * Called on every `scroll` event and on `_init`\n       * fires functions based on booleans and cached values\n       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n       */},{key:'_calc',value:function _calc(checkSizes,scroll){if(checkSizes){this._setSizes();}if(!this.canStick){if(this.isStuck){this._removeSticky(true);}return false;}if(!scroll){scroll=window.pageYOffset;}if(scroll>=this.topPoint){if(scroll<=this.bottomPoint){if(!this.isStuck){this._setSticky();}}else{if(this.isStuck){this._removeSticky(false);}}}else{if(this.isStuck){this._removeSticky(true);}}}/**\n       * Causes the $element to become stuck.\n       * Adds `position: fixed;`, and helper classes.\n       * @fires Sticky#stuckto\n       * @function\n       * @private\n       */},{key:'_setSticky',value:function _setSticky(){var _this=this,stickTo=this.options.stickTo,mrgn=stickTo==='top'?'marginTop':'marginBottom',notStuckTo=stickTo==='top'?'bottom':'top',css={};css[mrgn]=this.options[mrgn]+'em';css[stickTo]=0;css[notStuckTo]='auto';css['left']=this.$container.offset().left+parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"],10);this.isStuck=true;this.$element.removeClass('is-anchored is-at-'+notStuckTo).addClass('is-stuck is-at-'+stickTo).css(css)/**\n         * Fires when the $element has become `position: fixed;`\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n         * @event Sticky#stuckto\n         */.trigger('sticky.zf.stuckto:'+stickTo);this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\",function(){_this._setSizes();});}/**\n       * Causes the $element to become unstuck.\n       * Removes `position: fixed;`, and helper classes.\n       * Adds other helper classes.\n       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n       * @fires Sticky#unstuckfrom\n       * @private\n       */},{key:'_removeSticky',value:function _removeSticky(isTop){var stickTo=this.options.stickTo,stickToTop=stickTo==='top',css={},anchorPt=(this.points?this.points[1]-this.points[0]:this.anchorHeight)-this.elemHeight,mrgn=stickToTop?'marginTop':'marginBottom',notStuckTo=stickToTop?'bottom':'top',topOrBottom=isTop?'top':'bottom';css[mrgn]=0;css['bottom']='auto';if(isTop){css['top']=0;}else{css['top']=anchorPt;}css['left']='';this.isStuck=false;this.$element.removeClass('is-stuck is-at-'+stickTo).addClass('is-anchored is-at-'+topOrBottom).css(css)/**\n         * Fires when the $element has become anchored.\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n         * @event Sticky#unstuckfrom\n         */.trigger('sticky.zf.unstuckfrom:'+topOrBottom);}/**\n       * Sets the $element and $container sizes for plugin.\n       * Calls `_setBreakPoints`.\n       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n       * @private\n       */},{key:'_setSizes',value:function _setSizes(cb){this.canStick=Foundation.MediaQuery.atLeast(this.options.stickyOn);if(!this.canStick){cb();}var _this=this,newElemWidth=this.$container[0].getBoundingClientRect().width,comp=window.getComputedStyle(this.$container[0]),pdng=parseInt(comp['padding-right'],10);if(this.$anchor&&this.$anchor.length){this.anchorHeight=this.$anchor[0].getBoundingClientRect().height;}else{this._parsePoints();}this.$element.css({'max-width':newElemWidth-pdng+'px'});var newContainerHeight=this.$element[0].getBoundingClientRect().height||this.containerHeight;if(this.$element.css(\"display\")==\"none\"){newContainerHeight=0;}this.containerHeight=newContainerHeight;this.$container.css({height:newContainerHeight});this.elemHeight=newContainerHeight;if(this.isStuck){this.$element.css({\"left\":this.$container.offset().left+parseInt(comp['padding-left'],10)});}this._setBreakPoints(newContainerHeight,function(){if(cb){cb();}});}/**\n       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n       * @param {Function} cb - optional callback function to be called on completion.\n       * @private\n       */},{key:'_setBreakPoints',value:function _setBreakPoints(elemHeight,cb){if(!this.canStick){if(cb){cb();}else{return false;}}var mTop=emCalc(this.options.marginTop),mBtm=emCalc(this.options.marginBottom),topPoint=this.points?this.points[0]:this.$anchor.offset().top,bottomPoint=this.points?this.points[1]:topPoint+this.anchorHeight,// topPoint = this.$anchor.offset().top || this.points[0],\n// bottomPoint = topPoint + this.anchorHeight || this.points[1],\nwinHeight=window.innerHeight;if(this.options.stickTo==='top'){topPoint-=mTop;bottomPoint-=elemHeight+mTop;}else if(this.options.stickTo==='bottom'){topPoint-=winHeight-(elemHeight+mBtm);bottomPoint-=winHeight-mBtm;}else{//this would be the stickTo: both option... tricky\n}this.topPoint=topPoint;this.bottomPoint=bottomPoint;if(cb){cb();}}/**\n       * Destroys the current sticky element.\n       * Resets the element to the top position first.\n       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n       * @function\n       */},{key:'destroy',value:function destroy(){this._removeSticky(true);this.$element.removeClass(this.options.stickyClass+' is-anchored is-at-top').css({height:'',top:'',bottom:'','max-width':''}).off('resizeme.zf.trigger');if(this.$anchor&&this.$anchor.length){this.$anchor.off('change.zf.sticky');}$(window).off(this.scrollListener);if(this.wasWrapped){this.$element.unwrap();}else{this.$container.removeClass(this.options.containerClass).css({height:''});}Foundation.unregisterPlugin(this);}}]);return Sticky;}();Sticky.defaults={/**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n     */container:'<div data-sticky-container></div>',/**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */stickTo:'top',/**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */anchor:'',/**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */topAnchor:'',/**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */btmAnchor:'',/**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */marginTop:1,/**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */marginBottom:1,/**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */stickyOn:'medium',/**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */stickyClass:'sticky',/**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */containerClass:'sticky-container',/**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */checkEvery:-1};/**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */function emCalc(em){return parseInt(window.getComputedStyle(document.body,null).fontSize,10)*em;}// Window exports\nFoundation.plugin(Sticky,'Sticky');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Tabs module.\n   * @module foundation.tabs\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.timerAndImageLoader if tabs contain images\n   */var Tabs=function(){/**\n     * Creates a new instance of tabs.\n     * @class\n     * @fires Tabs#init\n     * @param {jQuery} element - jQuery object to make into tabs.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Tabs(element,options){_classCallCheck(this,Tabs);this.$element=element;this.options=$.extend({},Tabs.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Tabs');Foundation.Keyboard.register('Tabs',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'previous','ARROW_DOWN':'next','ARROW_LEFT':'previous'// 'TAB': 'next',\n// 'SHIFT_TAB': 'previous'\n});}/**\n     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\n     * @private\n     */_createClass(Tabs,[{key:'_init',value:function _init(){var _this=this;this.$tabTitles=this.$element.find('.'+this.options.linkClass);this.$tabContent=$('[data-tabs-content=\"'+this.$element[0].id+'\"]');this.$tabTitles.each(function(){var $elem=$(this),$link=$elem.find('a'),isActive=$elem.hasClass('is-active'),hash=$link[0].hash.slice(1),linkId=$link[0].id?$link[0].id:hash+'-label',$tabContent=$('#'+hash);$elem.attr({'role':'presentation'});$link.attr({'role':'tab','aria-controls':hash,'aria-selected':isActive,'id':linkId});$tabContent.attr({'role':'tabpanel','aria-hidden':!isActive,'aria-labelledby':linkId});if(isActive&&_this.options.autoFocus){$link.focus();}});if(this.options.matchHeight){var $images=this.$tabContent.find('img');if($images.length){Foundation.onImagesLoaded($images,this._setHeight.bind(this));}else{this._setHeight();}}this._events();}/**\n       * Adds event handlers for items within the tabs.\n       * @private\n       */},{key:'_events',value:function _events(){this._addKeyHandler();this._addClickHandler();this._setHeightMqHandler=null;if(this.options.matchHeight){this._setHeightMqHandler=this._setHeight.bind(this);$(window).on('changed.zf.mediaquery',this._setHeightMqHandler);}}/**\n       * Adds click handlers for items within the tabs.\n       * @private\n       */},{key:'_addClickHandler',value:function _addClickHandler(){var _this=this;this.$element.off('click.zf.tabs').on('click.zf.tabs','.'+this.options.linkClass,function(e){e.preventDefault();e.stopPropagation();if($(this).hasClass('is-active')){return;}_this._handleTabChange($(this));});}/**\n       * Adds keyboard event handlers for items within the tabs.\n       * @private\n       */},{key:'_addKeyHandler',value:function _addKeyHandler(){var _this=this;var $firstTab=_this.$element.find('li:first-of-type');var $lastTab=_this.$element.find('li:last-of-type');this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs',function(e){if(e.which===9)return;var $element=$(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){if(_this.options.wrapOnKeys){$prevElement=i===0?$elements.last():$elements.eq(i-1);$nextElement=i===$elements.length-1?$elements.first():$elements.eq(i+1);}else{$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));}return;}});// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Tabs',{open:function open(){$element.find('[role=\"tab\"]').focus();_this._handleTabChange($element);},previous:function previous(){$prevElement.find('[role=\"tab\"]').focus();_this._handleTabChange($prevElement);},next:function next(){$nextElement.find('[role=\"tab\"]').focus();_this._handleTabChange($nextElement);},handled:function handled(){e.stopPropagation();e.preventDefault();}});});}/**\n       * Opens the tab `$targetContent` defined by `$target`.\n       * @param {jQuery} $target - Tab to open.\n       * @fires Tabs#change\n       * @function\n       */},{key:'_handleTabChange',value:function _handleTabChange($target){var $tabLink=$target.find('[role=\"tab\"]'),hash=$tabLink[0].hash,$targetContent=this.$tabContent.find(hash),$oldTab=this.$element.find('.'+this.options.linkClass+'.is-active').removeClass('is-active').find('[role=\"tab\"]').attr({'aria-selected':'false'});$('#'+$oldTab.attr('aria-controls')).removeClass('is-active').attr({'aria-hidden':'true'});$target.addClass('is-active');$tabLink.attr({'aria-selected':'true'});$targetContent.addClass('is-active').attr({'aria-hidden':'false'});/**\n         * Fires when the plugin has successfully changed tabs.\n         * @event Tabs#change\n         */this.$element.trigger('change.zf.tabs',[$target]);}/**\n       * Public method for selecting a content pane to display.\n       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\n       * @function\n       */},{key:'selectTab',value:function selectTab(elem){var idStr;if((typeof elem==='undefined'?'undefined':_typeof(elem))==='object'){idStr=elem[0].id;}else{idStr=elem;}if(idStr.indexOf('#')<0){idStr='#'+idStr;}var $target=this.$tabTitles.find('[href=\"'+idStr+'\"]').parent('.'+this.options.linkClass);this._handleTabChange($target);}},{key:'_setHeight',/**\n       * Sets the height of each panel to the height of the tallest panel.\n       * If enabled in options, gets called on media query change.\n       * If loading content via external source, can be called directly or with _reflow.\n       * @function\n       * @private\n       */value:function _setHeight(){var max=0;this.$tabContent.find('.'+this.options.panelClass).css('height','').each(function(){var panel=$(this),isActive=panel.hasClass('is-active');if(!isActive){panel.css({'visibility':'hidden','display':'block'});}var temp=this.getBoundingClientRect().height;if(!isActive){panel.css({'visibility':'','display':''});}max=temp>max?temp:max;}).css('height',max+'px');}/**\n       * Destroys an instance of an tabs.\n       * @fires Tabs#destroyed\n       */},{key:'destroy',value:function destroy(){this.$element.find('.'+this.options.linkClass).off('.zf.tabs').hide().end().find('.'+this.options.panelClass).hide();if(this.options.matchHeight){if(this._setHeightMqHandler!=null){$(window).off('changed.zf.mediaquery',this._setHeightMqHandler);}}Foundation.unregisterPlugin(this);}}]);return Tabs;}();Tabs.defaults={/**\n     * Allows the window to scroll to content of active pane on load if set to true.\n     * @option\n     * @example false\n     */autoFocus:false,/**\n     * Allows keyboard input to 'wrap' around the tab links.\n     * @option\n     * @example true\n     */wrapOnKeys:true,/**\n     * Allows the tab content panes to match heights if set to true.\n     * @option\n     * @example false\n     */matchHeight:false,/**\n     * Class applied to `li`'s in tab link list.\n     * @option\n     * @example 'tabs-title'\n     */linkClass:'tabs-title',/**\n     * Class applied to the content containers.\n     * @option\n     * @example 'tabs-panel'\n     */panelClass:'tabs-panel'};function checkClass($elem){return $elem.hasClass('is-active');}// Window exports\nFoundation.plugin(Tabs,'Tabs');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Toggler module.\n   * @module foundation.toggler\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   */var Toggler=function(){/**\n     * Creates a new instance of Toggler.\n     * @class\n     * @fires Toggler#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Toggler(element,options){_classCallCheck(this,Toggler);this.$element=element;this.options=$.extend({},Toggler.defaults,element.data(),options);this.className='';this._init();this._events();Foundation.registerPlugin(this,'Toggler');}/**\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n     * @function\n     * @private\n     */_createClass(Toggler,[{key:'_init',value:function _init(){var input;// Parse animation classes if they were set\nif(this.options.animate){input=this.options.animate.split(' ');this.animationIn=input[0];this.animationOut=input[1]||null;}// Otherwise, parse toggle class\nelse{input=this.$element.data('toggler');// Allow for a . at the beginning of the string\nthis.className=input[0]==='.'?input.slice(1):input;}// Add ARIA attributes to triggers\nvar id=this.$element[0].id;$('[data-open=\"'+id+'\"], [data-close=\"'+id+'\"], [data-toggle=\"'+id+'\"]').attr('aria-controls',id);// If the target is hidden, add aria-hidden\nthis.$element.attr('aria-expanded',this.$element.is(':hidden')?false:true);}/**\n       * Initializes events for the toggle trigger.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger',this.toggle.bind(this));}/**\n       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n       * @function\n       * @fires Toggler#on\n       * @fires Toggler#off\n       */},{key:'toggle',value:function toggle(){this[this.options.animate?'_toggleAnimate':'_toggleClass']();}},{key:'_toggleClass',value:function _toggleClass(){this.$element.toggleClass(this.className);var isOn=this.$element.hasClass(this.className);if(isOn){/**\n           * Fires if the target element has the class after a toggle.\n           * @event Toggler#on\n           */this.$element.trigger('on.zf.toggler');}else{/**\n           * Fires if the target element does not have the class after a toggle.\n           * @event Toggler#off\n           */this.$element.trigger('off.zf.toggler');}this._updateARIA(isOn);}},{key:'_toggleAnimate',value:function _toggleAnimate(){var _this=this;if(this.$element.is(':hidden')){Foundation.Motion.animateIn(this.$element,this.animationIn,function(){_this._updateARIA(true);this.trigger('on.zf.toggler');});}else{Foundation.Motion.animateOut(this.$element,this.animationOut,function(){_this._updateARIA(false);this.trigger('off.zf.toggler');});}}},{key:'_updateARIA',value:function _updateARIA(isOn){this.$element.attr('aria-expanded',isOn?true:false);}/**\n       * Destroys the instance of Toggler on the element.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.off('.zf.toggler');Foundation.unregisterPlugin(this);}}]);return Toggler;}();Toggler.defaults={/**\n     * Tells the plugin if the element should animated when toggled.\n     * @option\n     * @example false\n     */animate:false};// Window exports\nFoundation.plugin(Toggler,'Toggler');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Tooltip module.\n   * @module foundation.tooltip\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   */var Tooltip=function(){/**\n     * Creates a new instance of a Tooltip.\n     * @class\n     * @fires Tooltip#init\n     * @param {jQuery} element - jQuery object to attach a tooltip to.\n     * @param {Object} options - object to extend the default configuration.\n     */function Tooltip(element,options){_classCallCheck(this,Tooltip);this.$element=element;this.options=$.extend({},Tooltip.defaults,this.$element.data(),options);this.isActive=false;this.isClick=false;this._init();Foundation.registerPlugin(this,'Tooltip');}/**\n     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n     * @private\n     */_createClass(Tooltip,[{key:'_init',value:function _init(){var elemId=this.$element.attr('aria-describedby')||Foundation.GetYoDigits(6,'tooltip');this.options.positionClass=this.options.positionClass||this._getPositionClass(this.$element);this.options.tipText=this.options.tipText||this.$element.attr('title');this.template=this.options.template?$(this.options.template):this._buildTemplate(elemId);this.template.appendTo(document.body).text(this.options.tipText).hide();this.$element.attr({'title':'','aria-describedby':elemId,'data-yeti-box':elemId,'data-toggle':elemId,'data-resize':elemId}).addClass(this.triggerClass);//helper variables to track movement on collisions\nthis.usedPositions=[];this.counter=4;this.classChanged=false;this._events();}/**\n       * Grabs the current positioning class, if present, and returns the value or an empty string.\n       * @private\n       */},{key:'_getPositionClass',value:function _getPositionClass(element){if(!element){return'';}// var position = element.attr('class').match(/top|left|right/g);\nvar position=element[0].className.match(/\\b(top|left|right)\\b/g);position=position?position[0]:'';return position;}},{key:'_buildTemplate',/**\n       * builds the tooltip element, adds attributes, and returns the template.\n       * @private\n       */value:function _buildTemplate(id){var templateClasses=(this.options.tooltipClass+' '+this.options.positionClass+' '+this.options.templateClasses).trim();var $template=$('<div></div>').addClass(templateClasses).attr({'role':'tooltip','aria-hidden':true,'data-is-active':false,'data-is-focus':false,'id':id});return $template;}/**\n       * Function that gets called if a collision event is detected.\n       * @param {String} position - positioning class to try\n       * @private\n       */},{key:'_reposition',value:function _reposition(position){this.usedPositions.push(position?position:'bottom');//default, try switching to opposite side\nif(!position&&this.usedPositions.indexOf('top')<0){this.template.addClass('top');}else if(position==='top'&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}else if(position==='left'&&this.usedPositions.indexOf('right')<0){this.template.removeClass(position).addClass('right');}else if(position==='right'&&this.usedPositions.indexOf('left')<0){this.template.removeClass(position).addClass('left');}//if default change didn't work, try bottom or left first\nelse if(!position&&this.usedPositions.indexOf('top')>-1&&this.usedPositions.indexOf('left')<0){this.template.addClass('left');}else if(position==='top'&&this.usedPositions.indexOf('bottom')>-1&&this.usedPositions.indexOf('left')<0){this.template.removeClass(position).addClass('left');}else if(position==='left'&&this.usedPositions.indexOf('right')>-1&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}else if(position==='right'&&this.usedPositions.indexOf('left')>-1&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}//if nothing cleared, set to bottom\nelse{this.template.removeClass(position);}this.classChanged=true;this.counter--;}/**\n       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n       * if the tooltip is larger than the screen width, default to full width - any user selected margin\n       * @private\n       */},{key:'_setPosition',value:function _setPosition(){var position=this._getPositionClass(this.template),$tipDims=Foundation.Box.GetDimensions(this.template),$anchorDims=Foundation.Box.GetDimensions(this.$element),direction=position==='left'?'left':position==='right'?'left':'top',param=direction==='top'?'height':'width',offset=param==='height'?this.options.vOffset:this.options.hOffset,_this=this;if($tipDims.width>=$tipDims.windowDims.width||!this.counter&&!Foundation.Box.ImNotTouchingYou(this.template)){this.template.offset(Foundation.Box.GetOffsets(this.template,this.$element,'center bottom',this.options.vOffset,this.options.hOffset,true)).css({// this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n'width':$anchorDims.windowDims.width-this.options.hOffset*2,'height':'auto'});return false;}this.template.offset(Foundation.Box.GetOffsets(this.template,this.$element,'center '+(position||'bottom'),this.options.vOffset,this.options.hOffset));while(!Foundation.Box.ImNotTouchingYou(this.template)&&this.counter){this._reposition(position);this._setPosition();}}/**\n       * reveals the tooltip, and fires an event to close any other open tooltips on the page\n       * @fires Tooltip#closeme\n       * @fires Tooltip#show\n       * @function\n       */},{key:'show',value:function show(){if(this.options.showOn!=='all'&&!Foundation.MediaQuery.atLeast(this.options.showOn)){// console.error('The screen is too small to display this tooltip');\nreturn false;}var _this=this;this.template.css('visibility','hidden').show();this._setPosition();/**\n         * Fires to close all other open tooltips on the page\n         * @event Closeme#tooltip\n         */this.$element.trigger('closeme.zf.tooltip',this.template.attr('id'));this.template.attr({'data-is-active':true,'aria-hidden':false});_this.isActive=true;// console.log(this.template);\nthis.template.stop().hide().css('visibility','').fadeIn(this.options.fadeInDuration,function(){//maybe do stuff?\n});/**\n         * Fires when the tooltip is shown\n         * @event Tooltip#show\n         */this.$element.trigger('show.zf.tooltip');}/**\n       * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n       * @fires Tooltip#hide\n       * @function\n       */},{key:'hide',value:function hide(){// console.log('hiding', this.$element.data('yeti-box'));\nvar _this=this;this.template.stop().attr({'aria-hidden':true,'data-is-active':false}).fadeOut(this.options.fadeOutDuration,function(){_this.isActive=false;_this.isClick=false;if(_this.classChanged){_this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);_this.usedPositions=[];_this.counter=4;_this.classChanged=false;}});/**\n         * fires when the tooltip is hidden\n         * @event Tooltip#hide\n         */this.$element.trigger('hide.zf.tooltip');}/**\n       * adds event listeners for the tooltip and its anchor\n       * TODO combine some of the listeners like focus and mouseenter, etc.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;var $template=this.template;var isFocus=false;if(!this.options.disableHover){this.$element.on('mouseenter.zf.tooltip',function(e){if(!_this.isActive){_this.timeout=setTimeout(function(){_this.show();},_this.options.hoverDelay);}}).on('mouseleave.zf.tooltip',function(e){clearTimeout(_this.timeout);if(!isFocus||_this.isClick&&!_this.options.clickOpen){_this.hide();}});}if(this.options.clickOpen){this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();if(_this.isClick){//_this.hide();\n// _this.isClick = false;\n}else{_this.isClick=true;if((_this.options.disableHover||!_this.$element.attr('tabindex'))&&!_this.isActive){_this.show();}}});}else{this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();_this.isClick=true;});}if(!this.options.disableForTouch){this.$element.on('tap.zf.tooltip touchend.zf.tooltip',function(e){_this.isActive?_this.hide():_this.show();});}this.$element.on({// 'toggle.zf.trigger': this.toggle.bind(this),\n// 'close.zf.trigger': this.hide.bind(this)\n'close.zf.trigger':this.hide.bind(this)});this.$element.on('focus.zf.tooltip',function(e){isFocus=true;if(_this.isClick){// If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n// a real focus, otherwise on hover and come back we get bad behavior\nif(!_this.options.clickOpen){isFocus=false;}return false;}else{_this.show();}}).on('focusout.zf.tooltip',function(e){isFocus=false;_this.isClick=false;_this.hide();}).on('resizeme.zf.trigger',function(){if(_this.isActive){_this._setPosition();}});}/**\n       * adds a toggle method, in addition to the static show() & hide() functions\n       * @function\n       */},{key:'toggle',value:function toggle(){if(this.isActive){this.hide();}else{this.show();}}/**\n       * Destroys an instance of tooltip, removes template element from the view.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.attr('title',this.template.text()).off('.zf.trigger .zf.tootip')//  .removeClass('has-tip')\n.removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');this.template.remove();Foundation.unregisterPlugin(this);}}]);return Tooltip;}();Tooltip.defaults={disableForTouch:false,/**\n     * Time, in ms, before a tooltip should open on hover.\n     * @option\n     * @example 200\n     */hoverDelay:200,/**\n     * Time, in ms, a tooltip should take to fade into view.\n     * @option\n     * @example 150\n     */fadeInDuration:150,/**\n     * Time, in ms, a tooltip should take to fade out of view.\n     * @option\n     * @example 150\n     */fadeOutDuration:150,/**\n     * Disables hover events from opening the tooltip if set to true\n     * @option\n     * @example false\n     */disableHover:false,/**\n     * Optional addtional classes to apply to the tooltip template on init.\n     * @option\n     * @example 'my-cool-tip-class'\n     */templateClasses:'',/**\n     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n     * @option\n     * @example 'tooltip'\n     */tooltipClass:'tooltip',/**\n     * Class applied to the tooltip anchor element.\n     * @option\n     * @example 'has-tip'\n     */triggerClass:'has-tip',/**\n     * Minimum breakpoint size at which to open the tooltip.\n     * @option\n     * @example 'small'\n     */showOn:'small',/**\n     * Custom template to be used to generate markup for tooltip.\n     * @option\n     * @example '&lt;div class=\"tooltip\"&gt;&lt;/div&gt;'\n     */template:'',/**\n     * Text displayed in the tooltip template on open.\n     * @option\n     * @example 'Some cool space fact here.'\n     */tipText:'',touchCloseText:'Tap to close.',/**\n     * Allows the tooltip to remain open if triggered with a click or touch event.\n     * @option\n     * @example true\n     */clickOpen:true,/**\n     * Additional positioning classes, set by the JS\n     * @option\n     * @example 'top'\n     */positionClass:'',/**\n     * Distance, in pixels, the template should push away from the anchor on the Y axis.\n     * @option\n     * @example 10\n     */vOffset:10,/**\n     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\n     * @option\n     * @example 12\n     */hOffset:12};/**\n   * TODO utilize resize event trigger\n   */// Window exports\nFoundation.plugin(Tooltip,'Tooltip');}(jQuery);\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * headroom.js v0.9.3 - Give your page some headroom. Hide your header until you need it\n * Copyright (c) 2016 Nick Williams - http://wicky.nillia.ms/headroom.js\n * License: MIT\n */\n\n(function (root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // COMMONJS\n    module.exports = factory();\n  } else {\n    // BROWSER\n    root.Headroom = factory();\n  }\n})(undefined, function () {\n  'use strict';\n\n  /* exported features */\n\n  var features = {\n    bind: !!function () {}.bind,\n    classList: 'classList' in document.documentElement,\n    rAF: !!(window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame)\n  };\n  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;\n\n  /**\n   * Handles debouncing of events via requestAnimationFrame\n   * @see http://www.html5rocks.com/en/tutorials/speed/animations/\n   * @param {Function} callback The callback to handle whichever event\n   */\n  function Debouncer(callback) {\n    this.callback = callback;\n    this.ticking = false;\n  }\n  Debouncer.prototype = {\n    constructor: Debouncer,\n\n    /**\n     * dispatches the event to the supplied callback\n     * @private\n     */\n    update: function update() {\n      this.callback && this.callback();\n      this.ticking = false;\n    },\n\n    /**\n     * ensures events don't get stacked\n     * @private\n     */\n    requestTick: function requestTick() {\n      if (!this.ticking) {\n        requestAnimationFrame(this.rafCallback || (this.rafCallback = this.update.bind(this)));\n        this.ticking = true;\n      }\n    },\n\n    /**\n     * Attach this as the event listeners\n     */\n    handleEvent: function handleEvent() {\n      this.requestTick();\n    }\n  };\n  /**\n   * Check if object is part of the DOM\n   * @constructor\n   * @param {Object} obj element to check\n   */\n  function isDOMElement(obj) {\n    return obj && typeof window !== 'undefined' && (obj === window || obj.nodeType);\n  }\n\n  /**\n   * Helper function for extending objects\n   */\n  function extend(object /*, objectN ... */) {\n    if (arguments.length <= 0) {\n      throw new Error('Missing arguments in extend function');\n    }\n\n    var result = object || {},\n        key,\n        i;\n\n    for (i = 1; i < arguments.length; i++) {\n      var replacement = arguments[i] || {};\n\n      for (key in replacement) {\n        // Recurse into object except if the object is a DOM element\n        if (_typeof(result[key]) === 'object' && !isDOMElement(result[key])) {\n          result[key] = extend(result[key], replacement[key]);\n        } else {\n          result[key] = result[key] || replacement[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Helper function for normalizing tolerance option to object format\n   */\n  function normalizeTolerance(t) {\n    return t === Object(t) ? t : { down: t, up: t };\n  }\n\n  /**\n   * UI enhancement for fixed headers.\n   * Hides header when scrolling down\n   * Shows header when scrolling up\n   * @constructor\n   * @param {DOMElement} elem the header element\n   * @param {Object} options options for the widget\n   */\n  function Headroom(elem, options) {\n    options = extend(options, Headroom.options);\n\n    this.lastKnownScrollY = 0;\n    this.elem = elem;\n    this.tolerance = normalizeTolerance(options.tolerance);\n    this.classes = options.classes;\n    this.offset = options.offset;\n    this.scroller = options.scroller;\n    this.initialised = false;\n    this.onPin = options.onPin;\n    this.onUnpin = options.onUnpin;\n    this.onTop = options.onTop;\n    this.onNotTop = options.onNotTop;\n    this.onBottom = options.onBottom;\n    this.onNotBottom = options.onNotBottom;\n  }\n  Headroom.prototype = {\n    constructor: Headroom,\n\n    /**\n     * Initialises the widget\n     */\n    init: function init() {\n      if (!Headroom.cutsTheMustard) {\n        return;\n      }\n\n      this.debouncer = new Debouncer(this.update.bind(this));\n      this.elem.classList.add(this.classes.initial);\n\n      // defer event registration to handle browser \n      // potentially restoring previous scroll position\n      setTimeout(this.attachEvent.bind(this), 100);\n\n      return this;\n    },\n\n    /**\n     * Unattaches events and removes any classes that were added\n     */\n    destroy: function destroy() {\n      var classes = this.classes;\n\n      this.initialised = false;\n      this.elem.classList.remove(classes.unpinned, classes.pinned, classes.top, classes.notTop, classes.initial);\n      this.scroller.removeEventListener('scroll', this.debouncer, false);\n    },\n\n    /**\n     * Attaches the scroll event\n     * @private\n     */\n    attachEvent: function attachEvent() {\n      if (!this.initialised) {\n        this.lastKnownScrollY = this.getScrollY();\n        this.initialised = true;\n        this.scroller.addEventListener('scroll', this.debouncer, false);\n\n        this.debouncer.handleEvent();\n      }\n    },\n\n    /**\n     * Unpins the header if it's currently pinned\n     */\n    unpin: function unpin() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (classList.contains(classes.pinned) || !classList.contains(classes.unpinned)) {\n        classList.add(classes.unpinned);\n        classList.remove(classes.pinned);\n        this.onUnpin && this.onUnpin.call(this);\n      }\n    },\n\n    /**\n     * Pins the header if it's currently unpinned\n     */\n    pin: function pin() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (classList.contains(classes.unpinned)) {\n        classList.remove(classes.unpinned);\n        classList.add(classes.pinned);\n        this.onPin && this.onPin.call(this);\n      }\n    },\n\n    /**\n     * Handles the top states\n     */\n    top: function top() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.top)) {\n        classList.add(classes.top);\n        classList.remove(classes.notTop);\n        this.onTop && this.onTop.call(this);\n      }\n    },\n\n    /**\n     * Handles the not top state\n     */\n    notTop: function notTop() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.notTop)) {\n        classList.add(classes.notTop);\n        classList.remove(classes.top);\n        this.onNotTop && this.onNotTop.call(this);\n      }\n    },\n\n    bottom: function bottom() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.bottom)) {\n        classList.add(classes.bottom);\n        classList.remove(classes.notBottom);\n        this.onBottom && this.onBottom.call(this);\n      }\n    },\n\n    /**\n     * Handles the not top state\n     */\n    notBottom: function notBottom() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.notBottom)) {\n        classList.add(classes.notBottom);\n        classList.remove(classes.bottom);\n        this.onNotBottom && this.onNotBottom.call(this);\n      }\n    },\n\n    /**\n     * Gets the Y scroll position\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\n     * @return {Number} pixels the page has scrolled along the Y-axis\n     */\n    getScrollY: function getScrollY() {\n      return this.scroller.pageYOffset !== undefined ? this.scroller.pageYOffset : this.scroller.scrollTop !== undefined ? this.scroller.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n    },\n\n    /**\n     * Gets the height of the viewport\n     * @see http://andylangton.co.uk/blog/development/get-viewport-size-width-and-height-javascript\n     * @return {int} the height of the viewport in pixels\n     */\n    getViewportHeight: function getViewportHeight() {\n      return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    },\n\n    /**\n     * Gets the physical height of the DOM element\n     * @param  {Object}  elm the element to calculate the physical height of which\n     * @return {int}     the physical height of the element in pixels\n     */\n    getElementPhysicalHeight: function getElementPhysicalHeight(elm) {\n      return Math.max(elm.offsetHeight, elm.clientHeight);\n    },\n\n    /**\n     * Gets the physical height of the scroller element\n     * @return {int} the physical height of the scroller element in pixels\n     */\n    getScrollerPhysicalHeight: function getScrollerPhysicalHeight() {\n      return this.scroller === window || this.scroller === document.body ? this.getViewportHeight() : this.getElementPhysicalHeight(this.scroller);\n    },\n\n    /**\n     * Gets the height of the document\n     * @see http://james.padolsey.com/javascript/get-document-height-cross-browser/\n     * @return {int} the height of the document in pixels\n     */\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body,\n          documentElement = document.documentElement;\n\n      return Math.max(body.scrollHeight, documentElement.scrollHeight, body.offsetHeight, documentElement.offsetHeight, body.clientHeight, documentElement.clientHeight);\n    },\n\n    /**\n     * Gets the height of the DOM element\n     * @param  {Object}  elm the element to calculate the height of which\n     * @return {int}     the height of the element in pixels\n     */\n    getElementHeight: function getElementHeight(elm) {\n      return Math.max(elm.scrollHeight, elm.offsetHeight, elm.clientHeight);\n    },\n\n    /**\n     * Gets the height of the scroller element\n     * @return {int} the height of the scroller element in pixels\n     */\n    getScrollerHeight: function getScrollerHeight() {\n      return this.scroller === window || this.scroller === document.body ? this.getDocumentHeight() : this.getElementHeight(this.scroller);\n    },\n\n    /**\n     * determines if the scroll position is outside of document boundaries\n     * @param  {int}  currentScrollY the current y scroll position\n     * @return {bool} true if out of bounds, false otherwise\n     */\n    isOutOfBounds: function isOutOfBounds(currentScrollY) {\n      var pastTop = currentScrollY < 0,\n          pastBottom = currentScrollY + this.getScrollerPhysicalHeight() > this.getScrollerHeight();\n\n      return pastTop || pastBottom;\n    },\n\n    /**\n     * determines if the tolerance has been exceeded\n     * @param  {int} currentScrollY the current scroll y position\n     * @return {bool} true if tolerance exceeded, false otherwise\n     */\n    toleranceExceeded: function toleranceExceeded(currentScrollY, direction) {\n      return Math.abs(currentScrollY - this.lastKnownScrollY) >= this.tolerance[direction];\n    },\n\n    /**\n     * determine if it is appropriate to unpin\n     * @param  {int} currentScrollY the current y scroll position\n     * @param  {bool} toleranceExceeded has the tolerance been exceeded?\n     * @return {bool} true if should unpin, false otherwise\n     */\n    shouldUnpin: function shouldUnpin(currentScrollY, toleranceExceeded) {\n      var scrollingDown = currentScrollY > this.lastKnownScrollY,\n          pastOffset = currentScrollY >= this.offset;\n\n      return scrollingDown && pastOffset && toleranceExceeded;\n    },\n\n    /**\n     * determine if it is appropriate to pin\n     * @param  {int} currentScrollY the current y scroll position\n     * @param  {bool} toleranceExceeded has the tolerance been exceeded?\n     * @return {bool} true if should pin, false otherwise\n     */\n    shouldPin: function shouldPin(currentScrollY, toleranceExceeded) {\n      var scrollingUp = currentScrollY < this.lastKnownScrollY,\n          pastOffset = currentScrollY <= this.offset;\n\n      return scrollingUp && toleranceExceeded || pastOffset;\n    },\n\n    /**\n     * Handles updating the state of the widget\n     */\n    update: function update() {\n      var currentScrollY = this.getScrollY(),\n          scrollDirection = currentScrollY > this.lastKnownScrollY ? 'down' : 'up',\n          toleranceExceeded = this.toleranceExceeded(currentScrollY, scrollDirection);\n\n      if (this.isOutOfBounds(currentScrollY)) {\n        // Ignore bouncy scrolling in OSX\n        return;\n      }\n\n      if (currentScrollY <= this.offset) {\n        this.top();\n      } else {\n        this.notTop();\n      }\n\n      if (currentScrollY + this.getViewportHeight() >= this.getScrollerHeight()) {\n        this.bottom();\n      } else {\n        this.notBottom();\n      }\n\n      if (this.shouldUnpin(currentScrollY, toleranceExceeded)) {\n        this.unpin();\n      } else if (this.shouldPin(currentScrollY, toleranceExceeded)) {\n        this.pin();\n      }\n\n      this.lastKnownScrollY = currentScrollY;\n    }\n  };\n  /**\n   * Default options\n   * @type {Object}\n   */\n  Headroom.options = {\n    tolerance: {\n      up: 0,\n      down: 0\n    },\n    offset: 0,\n    scroller: window,\n    classes: {\n      pinned: 'headroom--pinned',\n      unpinned: 'headroom--unpinned',\n      top: 'headroom--top',\n      notTop: 'headroom--not-top',\n      bottom: 'headroom--bottom',\n      notBottom: 'headroom--not-bottom',\n      initial: 'headroom'\n    }\n  };\n  Headroom.cutsTheMustard = typeof features !== 'undefined' && features.rAF && features.bind && features.classList;\n\n  return Headroom;\n});\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n        return root.svg4everybody = factory();\n    }) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? module.exports = factory() : root.svg4everybody = factory();\n}(undefined, function () {\n    /*! svg4everybody v2.1.0 | github.com/jonathantneal/svg4everybody */\n    function embed(svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(),\n                viewBox = !svg.getAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for ( // clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length;) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            svg.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function () {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function (item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)),\n                    // embed the target into the svg\n                    embed(item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for ( // get the cached <use> index\n            var index = 0; index < uses.length;) {\n                // get the current <use>\n                var use = uses[index],\n                    svg = use.parentNode;\n                if (svg && /svg/i.test(svg.nodeName)) {\n                    var src = use.getAttribute(\"xlink:href\");\n                    if (polyfill && (!opts.validate || opts.validate(src, svg, use))) {\n                        // remove the <use> element\n                        svg.removeChild(use);\n                        // parse the src and get the url and id\n                        var srcSplit = src.split(\"#\"),\n                            url = srcSplit.shift(),\n                            id = srcSplit.join(\"#\");\n                        // if the link is external\n                        if (url.length) {\n                            // get the cached xhr request\n                            var xhr = requests[url];\n                            // ensure the xhr request exists\n                            xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                            xhr._embeds.push({\n                                svg: svg,\n                                id: id\n                            }), // prepare the xhr ready state change event\n                            loadreadystatechange(xhr);\n                        } else {\n                            // embed the local id into the svg\n                            embed(svg, document.getElementById(id));\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill,\n            opts = Object(rawopts),\n            newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/,\n            webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/,\n            olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;\n        // create xhr requests object\n        var requests = {},\n            requestAnimationFrame = window.requestAnimationFrame || setTimeout,\n            uses = document.getElementsByTagName(\"use\");\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    return svg4everybody;\n});\n\n},{}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * Waves v0.7.5\n * http://fian.my.id/Waves\n *\n * Copyright 2014-2016 Alfiana E. Sibuea and other contributors\n * Released under the MIT license\n * https://github.com/fians/Waves/blob/master/LICENSE\n */\n\n;(function (window, factory) {\n    'use strict';\n\n    // AMD. Register as an anonymous module.  Wrap in function so we have access\n    // to root via `this`.\n\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return factory.apply(window);\n        });\n    }\n\n    // Node. Does not work with strict CommonJS, but only CommonJS-like\n    // environments that support module.exports, like Node.\n    else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n            module.exports = factory.call(window);\n        }\n\n        // Browser globals.\n        else {\n                window.Waves = factory.call(window);\n            }\n})((typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' ? global : undefined, function () {\n    'use strict';\n\n    var Waves = Waves || {};\n    var $$ = document.querySelectorAll.bind(document);\n    var toString = Object.prototype.toString;\n    var isTouchAvailable = 'ontouchstart' in window;\n\n    // Find exact position of element\n    function isWindow(obj) {\n        return obj !== null && obj === obj.window;\n    }\n\n    function getWindow(elem) {\n        return isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;\n    }\n\n    function isObject(value) {\n        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n        return type === 'function' || type === 'object' && !!value;\n    }\n\n    function isDOMNode(obj) {\n        return isObject(obj) && obj.nodeType > 0;\n    }\n\n    function getWavesElements(nodes) {\n        var stringRepr = toString.call(nodes);\n\n        if (stringRepr === '[object String]') {\n            return $$(nodes);\n        } else if (isObject(nodes) && /^\\[object (Array|HTMLCollection|NodeList|Object)\\]$/.test(stringRepr) && nodes.hasOwnProperty('length')) {\n            return nodes;\n        } else if (isDOMNode(nodes)) {\n            return [nodes];\n        }\n\n        return [];\n    }\n\n    function offset(elem) {\n        var docElem,\n            win,\n            box = { top: 0, left: 0 },\n            doc = elem && elem.ownerDocument;\n\n        docElem = doc.documentElement;\n\n        if (_typeof(elem.getBoundingClientRect) !== (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined))) {\n            box = elem.getBoundingClientRect();\n        }\n        win = getWindow(doc);\n        return {\n            top: box.top + win.pageYOffset - docElem.clientTop,\n            left: box.left + win.pageXOffset - docElem.clientLeft\n        };\n    }\n\n    function convertStyle(styleObj) {\n        var style = '';\n\n        for (var prop in styleObj) {\n            if (styleObj.hasOwnProperty(prop)) {\n                style += prop + ':' + styleObj[prop] + ';';\n            }\n        }\n\n        return style;\n    }\n\n    var Effect = {\n\n        // Effect duration\n        duration: 750,\n\n        // Effect delay (check for scroll before showing effect)\n        delay: 200,\n\n        show: function show(e, element, velocity) {\n\n            // Disable right click\n            if (e.button === 2) {\n                return false;\n            }\n\n            element = element || this;\n\n            // Create ripple\n            var ripple = document.createElement('div');\n            ripple.className = 'waves-ripple waves-rippling';\n            element.appendChild(ripple);\n\n            // Get click coordinate and element width\n            var pos = offset(element);\n            var relativeY = 0;\n            var relativeX = 0;\n            // Support for touch devices\n            if ('touches' in e && e.touches.length) {\n                relativeY = e.touches[0].pageY - pos.top;\n                relativeX = e.touches[0].pageX - pos.left;\n            }\n            //Normal case\n            else {\n                    relativeY = e.pageY - pos.top;\n                    relativeX = e.pageX - pos.left;\n                }\n            // Support for synthetic events\n            relativeX = relativeX >= 0 ? relativeX : 0;\n            relativeY = relativeY >= 0 ? relativeY : 0;\n\n            var scale = 'scale(' + element.clientWidth / 100 * 3 + ')';\n            var translate = 'translate(0,0)';\n\n            if (velocity) {\n                translate = 'translate(' + velocity.x + 'px, ' + velocity.y + 'px)';\n            }\n\n            // Attach data to element\n            ripple.setAttribute('data-hold', Date.now());\n            ripple.setAttribute('data-x', relativeX);\n            ripple.setAttribute('data-y', relativeY);\n            ripple.setAttribute('data-scale', scale);\n            ripple.setAttribute('data-translate', translate);\n\n            // Set ripple position\n            var rippleStyle = {\n                top: relativeY + 'px',\n                left: relativeX + 'px'\n            };\n\n            ripple.classList.add('waves-notransition');\n            ripple.setAttribute('style', convertStyle(rippleStyle));\n            ripple.classList.remove('waves-notransition');\n\n            // Scale the ripple\n            rippleStyle['-webkit-transform'] = scale + ' ' + translate;\n            rippleStyle['-moz-transform'] = scale + ' ' + translate;\n            rippleStyle['-ms-transform'] = scale + ' ' + translate;\n            rippleStyle['-o-transform'] = scale + ' ' + translate;\n            rippleStyle.transform = scale + ' ' + translate;\n            rippleStyle.opacity = '1';\n\n            var duration = e.type === 'mousemove' ? 2500 : Effect.duration;\n            rippleStyle['-webkit-transition-duration'] = duration + 'ms';\n            rippleStyle['-moz-transition-duration'] = duration + 'ms';\n            rippleStyle['-o-transition-duration'] = duration + 'ms';\n            rippleStyle['transition-duration'] = duration + 'ms';\n\n            ripple.setAttribute('style', convertStyle(rippleStyle));\n        },\n\n        hide: function hide(e, element) {\n            element = element || this;\n\n            var ripples = element.getElementsByClassName('waves-rippling');\n\n            for (var i = 0, len = ripples.length; i < len; i++) {\n                removeRipple(e, element, ripples[i]);\n            }\n        }\n    };\n\n    /**\n     * Collection of wrapper for HTML element that only have single tag\n     * like <input> and <img>\n     */\n    var TagWrapper = {\n\n        // Wrap <input> tag so it can perform the effect\n        input: function input(element) {\n\n            var parent = element.parentNode;\n\n            // If input already have parent just pass through\n            if (parent.tagName.toLowerCase() === 'i' && parent.classList.contains('waves-effect')) {\n                return;\n            }\n\n            // Put element class and style to the specified parent\n            var wrapper = document.createElement('i');\n            wrapper.className = element.className + ' waves-input-wrapper';\n            element.className = 'waves-button-input';\n\n            // Put element as child\n            parent.replaceChild(wrapper, element);\n            wrapper.appendChild(element);\n\n            // Apply element color and background color to wrapper\n            var elementStyle = window.getComputedStyle(element, null);\n            var color = elementStyle.color;\n            var backgroundColor = elementStyle.backgroundColor;\n\n            wrapper.setAttribute('style', 'color:' + color + ';background:' + backgroundColor);\n            element.setAttribute('style', 'background-color:rgba(0,0,0,0);');\n        },\n\n        // Wrap <img> tag so it can perform the effect\n        img: function img(element) {\n\n            var parent = element.parentNode;\n\n            // If input already have parent just pass through\n            if (parent.tagName.toLowerCase() === 'i' && parent.classList.contains('waves-effect')) {\n                return;\n            }\n\n            // Put element as child\n            var wrapper = document.createElement('i');\n            parent.replaceChild(wrapper, element);\n            wrapper.appendChild(element);\n        }\n    };\n\n    /**\n     * Hide the effect and remove the ripple. Must be\n     * a separate function to pass the JSLint...\n     */\n    function removeRipple(e, el, ripple) {\n\n        // Check if the ripple still exist\n        if (!ripple) {\n            return;\n        }\n\n        ripple.classList.remove('waves-rippling');\n\n        var relativeX = ripple.getAttribute('data-x');\n        var relativeY = ripple.getAttribute('data-y');\n        var scale = ripple.getAttribute('data-scale');\n        var translate = ripple.getAttribute('data-translate');\n\n        // Get delay beetween mousedown and mouse leave\n        var diff = Date.now() - Number(ripple.getAttribute('data-hold'));\n        var delay = 350 - diff;\n\n        if (delay < 0) {\n            delay = 0;\n        }\n\n        if (e.type === 'mousemove') {\n            delay = 150;\n        }\n\n        // Fade out ripple after delay\n        var duration = e.type === 'mousemove' ? 2500 : Effect.duration;\n\n        setTimeout(function () {\n\n            var style = {\n                top: relativeY + 'px',\n                left: relativeX + 'px',\n                opacity: '0',\n\n                // Duration\n                '-webkit-transition-duration': duration + 'ms',\n                '-moz-transition-duration': duration + 'ms',\n                '-o-transition-duration': duration + 'ms',\n                'transition-duration': duration + 'ms',\n                '-webkit-transform': scale + ' ' + translate,\n                '-moz-transform': scale + ' ' + translate,\n                '-ms-transform': scale + ' ' + translate,\n                '-o-transform': scale + ' ' + translate,\n                'transform': scale + ' ' + translate\n            };\n\n            ripple.setAttribute('style', convertStyle(style));\n\n            setTimeout(function () {\n                try {\n                    el.removeChild(ripple);\n                } catch (e) {\n                    return false;\n                }\n            }, duration);\n        }, delay);\n    }\n\n    /**\n     * Disable mousedown event for 500ms during and after touch\n     */\n    var TouchHandler = {\n\n        /* uses an integer rather than bool so there's no issues with\n         * needing to clear timeouts if another touch event occurred\n         * within the 500ms. Cannot mouseup between touchstart and\n         * touchend, nor in the 500ms after touchend. */\n        touches: 0,\n\n        allowEvent: function allowEvent(e) {\n\n            var allow = true;\n\n            if (/^(mousedown|mousemove)$/.test(e.type) && TouchHandler.touches) {\n                allow = false;\n            }\n\n            return allow;\n        },\n        registerEvent: function registerEvent(e) {\n            var eType = e.type;\n\n            if (eType === 'touchstart') {\n\n                TouchHandler.touches += 1; // push\n            } else if (/^(touchend|touchcancel)$/.test(eType)) {\n\n                setTimeout(function () {\n                    if (TouchHandler.touches) {\n                        TouchHandler.touches -= 1; // pop after 500ms\n                    }\n                }, 500);\n            }\n        }\n    };\n\n    /**\n     * Delegated click handler for .waves-effect element.\n     * returns null when .waves-effect element not in \"click tree\"\n     */\n    function getWavesEffectElement(e) {\n\n        if (TouchHandler.allowEvent(e) === false) {\n            return null;\n        }\n\n        var element = null;\n        var target = e.target || e.srcElement;\n\n        while (target.parentElement) {\n            if (!(target instanceof SVGElement) && target.classList.contains('waves-effect')) {\n                element = target;\n                break;\n            }\n            target = target.parentElement;\n        }\n\n        return element;\n    }\n\n    /**\n     * Bubble the click and show effect if .waves-effect elem was found\n     */\n    function showEffect(e) {\n\n        // Disable effect if element has \"disabled\" property on it\n        // In some cases, the event is not triggered by the current element\n        // if (e.target.getAttribute('disabled') !== null) {\n        //     return;\n        // }\n\n        var element = getWavesEffectElement(e);\n\n        if (element !== null) {\n\n            // Make it sure the element has either disabled property, disabled attribute or 'disabled' class\n            if (element.disabled || element.getAttribute('disabled') || element.classList.contains('disabled')) {\n                return;\n            }\n\n            TouchHandler.registerEvent(e);\n\n            if (e.type === 'touchstart' && Effect.delay) {\n\n                var hidden = false;\n\n                var timer = setTimeout(function () {\n                    timer = null;\n                    Effect.show(e, element);\n                }, Effect.delay);\n\n                var hideEffect = function hideEffect(hideEvent) {\n\n                    // if touch hasn't moved, and effect not yet started: start effect now\n                    if (timer) {\n                        clearTimeout(timer);\n                        timer = null;\n                        Effect.show(e, element);\n                    }\n                    if (!hidden) {\n                        hidden = true;\n                        Effect.hide(hideEvent, element);\n                    }\n                };\n\n                var touchMove = function touchMove(moveEvent) {\n                    if (timer) {\n                        clearTimeout(timer);\n                        timer = null;\n                    }\n                    hideEffect(moveEvent);\n                };\n\n                element.addEventListener('touchmove', touchMove, false);\n                element.addEventListener('touchend', hideEffect, false);\n                element.addEventListener('touchcancel', hideEffect, false);\n            } else {\n\n                Effect.show(e, element);\n\n                if (isTouchAvailable) {\n                    element.addEventListener('touchend', Effect.hide, false);\n                    element.addEventListener('touchcancel', Effect.hide, false);\n                }\n\n                element.addEventListener('mouseup', Effect.hide, false);\n                element.addEventListener('mouseleave', Effect.hide, false);\n            }\n        }\n    }\n\n    Waves.init = function (options) {\n        var body = document.body;\n\n        options = options || {};\n\n        if ('duration' in options) {\n            Effect.duration = options.duration;\n        }\n\n        if ('delay' in options) {\n            Effect.delay = options.delay;\n        }\n\n        if (isTouchAvailable) {\n            body.addEventListener('touchstart', showEffect, false);\n            body.addEventListener('touchcancel', TouchHandler.registerEvent, false);\n            body.addEventListener('touchend', TouchHandler.registerEvent, false);\n        }\n\n        body.addEventListener('mousedown', showEffect, false);\n    };\n\n    /**\n     * Attach Waves to dynamically loaded inputs, or add .waves-effect and other\n     * waves classes to a set of elements. Set drag to true if the ripple mouseover\n     * or skimming effect should be applied to the elements.\n     */\n    Waves.attach = function (elements, classes) {\n\n        elements = getWavesElements(elements);\n\n        if (toString.call(classes) === '[object Array]') {\n            classes = classes.join(' ');\n        }\n\n        classes = classes ? ' ' + classes : '';\n\n        var element, tagName;\n\n        for (var i = 0, len = elements.length; i < len; i++) {\n\n            element = elements[i];\n            tagName = element.tagName.toLowerCase();\n\n            if (['input', 'img'].indexOf(tagName) !== -1) {\n                TagWrapper[tagName](element);\n                element = element.parentElement;\n            }\n\n            if (element.className.indexOf('waves-effect') === -1) {\n                element.className += ' waves-effect' + classes;\n            }\n        }\n    };\n\n    /**\n     * Cause a ripple to appear in an element via code.\n     */\n    Waves.ripple = function (elements, options) {\n        elements = getWavesElements(elements);\n        var elementsLen = elements.length;\n\n        options = options || {};\n        options.wait = options.wait || 0;\n        options.position = options.position || null; // default = centre of element\n\n\n        if (elementsLen) {\n            var element,\n                pos,\n                off,\n                centre = {},\n                i = 0;\n            var mousedown = {\n                type: 'mousedown',\n                button: 1\n            };\n            var hideRipple = function hideRipple(mouseup, element) {\n                return function () {\n                    Effect.hide(mouseup, element);\n                };\n            };\n\n            for (; i < elementsLen; i++) {\n                element = elements[i];\n                pos = options.position || {\n                    x: element.clientWidth / 2,\n                    y: element.clientHeight / 2\n                };\n\n                off = offset(element);\n                centre.x = off.left + pos.x;\n                centre.y = off.top + pos.y;\n\n                mousedown.pageX = centre.x;\n                mousedown.pageY = centre.y;\n\n                Effect.show(mousedown, element);\n\n                if (options.wait >= 0 && options.wait !== null) {\n                    var mouseup = {\n                        type: 'mouseup',\n                        button: 1\n                    };\n\n                    setTimeout(hideRipple(mouseup, element), options.wait);\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove all ripples from an element.\n     */\n    Waves.calm = function (elements) {\n        elements = getWavesElements(elements);\n        var mouseup = {\n            type: 'mouseup',\n            button: 1\n        };\n\n        for (var i = 0, len = elements.length; i < len; i++) {\n            Effect.hide(mouseup, elements[i]);\n        }\n    };\n\n    /**\n     * Deprecated API fallback\n     */\n    Waves.displayEffect = function (options) {\n        console.error('Waves.displayEffect() has been deprecated and will be removed in future version. Please use Waves.init() to initialize Waves effect');\n        Waves.init(options);\n    };\n\n    return Waves;\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"sourceRoot":"/source/"}